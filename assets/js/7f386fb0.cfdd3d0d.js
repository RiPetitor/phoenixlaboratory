"use strict";(self.webpackChunkphoenix_lab=self.webpackChunkphoenix_lab||[]).push([[755],{1470:(n,i,e)=>{e.d(i,{A:()=>A});var t=e(6540),r=e(4164),a=e(3104),o=e(6347),l=e(205),s=e(7485),c=e(1682),u=e(679);function d(n){return t.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,t.isValidElement)(n)&&function(n){const{props:i}=n;return!!i&&"object"==typeof i&&"value"in i}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:i,children:e}=n;return(0,t.useMemo)((()=>{const n=i??function(n){return d(n).map((({props:{value:n,label:i,attributes:e,default:t}})=>({value:n,label:i,attributes:e,default:t})))}(e);return function(n){const i=(0,c.XI)(n,((n,i)=>n.value===i.value));if(i.length>0)throw new Error(`Docusaurus error: Duplicate values "${i.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[i,e])}function f({value:n,tabValues:i}){return i.some((i=>i.value===n))}function m({queryString:n=!1,groupId:i}){const e=(0,o.W6)(),r=function({queryString:n=!1,groupId:i}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,s.aZ)(r),(0,t.useCallback)((n=>{if(!r)return;const i=new URLSearchParams(e.location.search);i.set(r,n),e.replace({...e.location,search:i.toString()})}),[r,e])]}function h(n){const{defaultValue:i,queryString:e=!1,groupId:r}=n,a=p(n),[o,s]=(0,t.useState)((()=>function({defaultValue:n,tabValues:i}){if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const e=i.find((n=>n.default))??i[0];if(!e)throw new Error("Unexpected error: 0 tabValues");return e.value}({defaultValue:i,tabValues:a}))),[c,d]=m({queryString:e,groupId:r}),[h,x]=function({groupId:n}){const i=function(n){return n?`docusaurus.tab.${n}`:null}(n),[e,r]=(0,u.Dv)(i);return[e,(0,t.useCallback)((n=>{i&&r.set(n)}),[i,r])]}({groupId:r}),b=(()=>{const n=c??h;return f({value:n,tabValues:a})?n:null})();(0,l.A)((()=>{b&&s(b)}),[b]);return{selectedValue:o,selectValue:(0,t.useCallback)((n=>{if(!f({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);s(n),d(n),x(n)}),[d,x,a]),tabValues:a}}var x=e(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=e(4848);function g({className:n,block:i,selectedValue:e,selectValue:t,tabValues:o}){const l=[],{blockElementScrollPositionUntilNextRender:s}=(0,a.a_)(),c=n=>{const i=n.currentTarget,r=l.indexOf(i),a=o[r].value;a!==e&&(s(i),t(a))},u=n=>{let i=null;switch(n.key){case"Enter":c(n);break;case"ArrowRight":{const e=l.indexOf(n.currentTarget)+1;i=l[e]??l[0];break}case"ArrowLeft":{const e=l.indexOf(n.currentTarget)-1;i=l[e]??l[l.length-1];break}}i?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":i},n),children:o.map((({value:n,label:i,attributes:t})=>(0,v.jsx)("li",{role:"tab",tabIndex:e===n?0:-1,"aria-selected":e===n,ref:n=>{l.push(n)},onKeyDown:u,onClick:c,...t,className:(0,r.A)("tabs__item",b.tabItem,t?.className,{"tabs__item--active":e===n}),children:i??n},n)))})}function j({lazy:n,children:i,selectedValue:e}){const a=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const n=a.find((n=>n.props.value===e));return n?(0,t.cloneElement)(n,{className:(0,r.A)("margin-top--md",n.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:a.map(((n,i)=>(0,t.cloneElement)(n,{key:i,hidden:n.props.value!==e})))})}function y(n){const i=h(n);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,v.jsx)(g,{...i,...n}),(0,v.jsx)(j,{...i,...n})]})}function A(n){const i=(0,x.A)();return(0,v.jsx)(y,{...n,children:d(n.children)},String(i))}},7723:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438/\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","description":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432","source":"@site/docs/learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438/\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.mdx","sourceDirName":"learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438","slug":"/learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438/\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","permalink":"/docs/learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438/\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","draft":false,"unlisted":false,"editUrl":"https://github.com/RiPetitor/phoenixlaboratory/edit/main/docs/learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438/\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.mdx","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"learnSidebar","previous":{"title":"\u0422\u0438\u043f \u0444\u0443\u043d\u043a\u0446\u0438\u0438","permalink":"/docs/learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438/\u0422\u0438\u043f \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},"next":{"title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","permalink":"/docs/learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/\u0413\u043b\u0430\u0432\u0430 4. \u0424\u0443\u043d\u043a\u0446\u0438\u0438/\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"}}');var r=e(4848),a=e(8453),o=e(1470),l=e(9365);const s={sidebar_position:11},c="\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",u={},d=[{value:"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432",id:"\u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430-\u0444\u0443\u043d\u043a\u0446\u0438\u0439-\u043a\u0430\u043a-\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432",level:2},{value:"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b",id:"\u0431\u0430\u0437\u043e\u0432\u044b\u0435-\u043f\u0440\u0438\u043c\u0435\u0440\u044b",level:2},{value:"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",id:"\u043f\u0440\u043e\u0441\u0442\u0430\u044f-\u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430-\u0444\u0443\u043d\u043a\u0446\u0438\u0438",level:3},{value:"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438",id:"\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430-\u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432-\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438",level:2},{value:"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443",id:"\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438-\u043a-\u043a\u0430\u0436\u0434\u043e\u043c\u0443-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443",level:3},{value:"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c",id:"\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430-\u0441-\u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u043c-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c",level:2},{value:"\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438",id:"\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b-\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438",level:3},{value:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 (callbacks)",id:"\u0444\u0443\u043d\u043a\u0446\u0438\u0438-\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e-\u0432\u044b\u0437\u043e\u0432\u0430-callbacks",level:2},{value:"\u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u0445",id:"\u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f-\u043e-\u0441\u043e\u0431\u044b\u0442\u0438\u044f\u0445",level:3},{value:"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",id:"\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",level:2},{value:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430",id:"\u0444\u0443\u043d\u043a\u0446\u0438\u0438-\u0432\u044b\u0441\u0448\u0435\u0433\u043e-\u043f\u043e\u0440\u044f\u0434\u043a\u0430",level:3},{value:"\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439",id:"\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f-\u0444\u0443\u043d\u043a\u0446\u0438\u0439",level:2},{value:"\u0426\u0435\u043f\u043e\u0447\u043a\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438",id:"\u0446\u0435\u043f\u043e\u0447\u043a\u0438-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438",level:3}];function p(n){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"\u0444\u0443\u043d\u043a\u0446\u0438\u0438-\u043a\u0430\u043a-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b-\u0434\u0440\u0443\u0433\u0438\u0445-\u0444\u0443\u043d\u043a\u0446\u0438\u0439",children:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439"})}),"\n","\n",(0,r.jsx)(i.h2,{id:"\u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430-\u0444\u0443\u043d\u043a\u0446\u0438\u0439-\u043a\u0430\u043a-\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432",children:"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432"}),"\n",(0,r.jsx)(i.p,{children:"\u0424\u0443\u043d\u043a\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u0434\u0440\u0443\u0433\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u044f \u0435\u0451 \u043a\u043e\u0434."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"int operation(int a, int b, int (*func)(int, int)) {\n    return func(a, b);  // \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"\u0431\u0430\u0437\u043e\u0432\u044b\u0435-\u043f\u0440\u0438\u043c\u0435\u0440\u044b",children:"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b"}),"\n",(0,r.jsx)(i.h3,{id:"\u043f\u0440\u043e\u0441\u0442\u0430\u044f-\u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430-\u0444\u0443\u043d\u043a\u0446\u0438\u0438",children:"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(l.A,{value:"basic",label:"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440",default:!0,children:(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\nint add(int a, int b) {\n    return a + b;\n}\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u0434\u0440\u0443\u0433\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\nint calculate(int x, int y, int (*operation)(int, int)) {\n    printf("\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 %d \u0438 %d\\n", x, y);\n    return operation(x, y);  // \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n}\n\nint main() {\n    int num1 = 8, num2 = 3;\n\n    printf("=== \u0414\u0415\u041c\u041e\u041d\u0421\u0422\u0420\u0410\u0426\u0418\u042f ===\\n");\n\n    int sum = calculate(num1, num2, add);       // \u041f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e add\n    printf("\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f: %d\\n", sum);\n\n    int product = calculate(num1, num2, multiply); // \u041f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e multiply\n    printf("\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f: %d\\n", product);\n\n    return 0;\n}\n'})})}),(0,r.jsx)(l.A,{value:"selection",label:"\u0412\u044b\u0431\u043e\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",children:(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:"#include <stdio.h>\n\nint subtract(int a, int b) { return a - b; }\nint modulo(int a, int b) { return b != 0 ? a % b : 0; }\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\nint (*selectOperation(char symbol))(int, int) {\n    switch (symbol) {\n        case '+': return add;\n        case '*': return multiply;\n        case '-': return subtract;\n        case '%': return modulo;\n        default: return NULL;\n    }\n}\n\n// \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0443\nvoid executeOperation(int a, int b, char symbol) {\n    int (*op)(int, int) = selectOperation(symbol);\n\n    if (op != NULL) {\n        int result = calculate(a, b, op);\n        printf(\"%d %c %d = %d\\n\", a, symbol, b, result);\n    } else {\n        printf(\"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f: %c\\n\", symbol);\n    }\n}\n\nint main() {\n    executeOperation(15, 4, '+');\n    executeOperation(15, 4, '*');\n    executeOperation(15, 4, '%');\n\n    return 0;\n}\n"})})})]}),"\n",(0,r.jsx)(i.h2,{id:"\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430-\u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432-\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438",children:"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438"}),"\n",(0,r.jsx)(i.h3,{id:"\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438-\u043a-\u043a\u0430\u0436\u0434\u043e\u043c\u0443-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443",children:"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nint doubleValue(int x) { return x * 2; }\nint squareValue(int x) { return x * x; }\nint incrementValue(int x) { return x + 1; }\n\n// \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\nvoid transformArray(int source[], int target[], int size, int (*transform)(int)) {\n    printf("\u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0443:\\n");\n\n    for (int i = 0; i < size; i++) {\n        target[i] = transform(source[i]);\n        printf("%d \u2192 %d\\n", source[i], target[i]);\n    }\n}\n\n// \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\nint countElements(int arr[], int size, int (*condition)(int)) {\n    int count = 0;\n\n    for (int i = 0; i < size; i++) {\n        if (condition(arr[i])) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\n// \u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430\nint isEven(int x) { return x % 2 == 0; }\nint isPositive(int x) { return x > 0; }\nint isLarge(int x) { return x >= 50; }\n\nint main() {\n    int original[6] = {-5, 12, 67, -3, 24, 78};\n    int transformed[6];\n\n    printf("\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432: ");\n    for (int i = 0; i < 6; i++) printf("%d ", original[i]);\n    printf("\\n\\n");\n\n    // \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n    transformArray(original, transformed, 6, doubleValue);\n    printf("\u0423\u0434\u0432\u043e\u0435\u043d\u043d\u044b\u0435: ");\n    for (int i = 0; i < 6; i++) printf("%d ", transformed[i]);\n    printf("\\n\\n");\n\n    // \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\n    printf("\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430:\\n");\n    printf("\u0427\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b: %d\\n", countElements(original, 6, isEven));\n    printf("\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445: %d\\n", countElements(original, 6, isPositive));\n    printf("\u0411\u043e\u043b\u044c\u0448\u0438\u0445 (\u226550): %d\\n", countElements(original, 6, isLarge));\n\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(i.h2,{id:"\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430-\u0441-\u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u043c-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c",children:"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\u043c"}),"\n",(0,r.jsx)(i.h3,{id:"\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b-\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438",children:"\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(l.A,{value:"custom-sort",label:"\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430",default:!0,children:(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\nint compareAscending(int a, int b) {\n    return a > b;  // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 1, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438\n}\n\nint compareDescending(int a, int b) {\n    return a < b;\n}\n\nint compareByLastDigit(int a, int b) {\n    return (a % 10) > (b % 10);  // \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0446\u0438\u0444\u0440\u0435\n}\n\nint compareByAbsoluteValue(int a, int b) {\n    int absA = a < 0 ? -a : a;\n    int absB = b < 0 ? -b : b;\n    return absA > absB;\n}\n\n// \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\nvoid customSort(int arr[], int size, int (*compare)(int, int), char *sortType) {\n    printf("\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430: %s\\n", sortType);\n\n    for (int i = 0; i < size - 1; i++) {\n        for (int j = 0; j < size - 1 - i; j++) {\n            if (compare(arr[j], arr[j + 1])) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int original[7] = {-15, 42, -8, 73, 24, -31, 56};\n\n    printf("\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432: ");\n    for (int i = 0; i < 7; i++) printf("%d ", original[i]);\n    printf("\\n\\n");\n\n    // \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u043f\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043e\u043a\n    int copy1[7], copy2[7], copy3[7], copy4[7];\n    for (int i = 0; i < 7; i++) {\n        copy1[i] = copy2[i] = copy3[i] = copy4[i] = original[i];\n    }\n\n    // \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n    customSort(copy1, 7, compareAscending, "\u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e");\n    for (int i = 0; i < 7; i++) printf("%d ", copy1[i]);\n    printf("\\n\\n");\n\n    customSort(copy2, 7, compareDescending, "\u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e");\n    for (int i = 0; i < 7; i++) printf("%d ", copy2[i]);\n    printf("\\n\\n");\n\n    customSort(copy3, 7, compareByLastDigit, "\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0446\u0438\u0444\u0440\u0435");\n    for (int i = 0; i < 7; i++) printf("%d ", copy3[i]);\n    printf("\\n\\n");\n\n    customSort(copy4, 7, compareByAbsoluteValue, "\u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e");\n    for (int i = 0; i < 7; i++) printf("%d ", copy4[i]);\n    printf("\\n");\n\n    return 0;\n}\n'})})}),(0,r.jsx)(l.A,{value:"search-algorithms",label:"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043f\u043e\u0438\u0441\u043a\u0430",children:(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u0423\u0441\u043b\u043e\u0432\u0438\u044f \u043f\u043e\u0438\u0441\u043a\u0430\nint findEven(int x) { return x % 2 == 0; }\nint findNegative(int x) { return x < 0; }\nint findLarge(int x) { return x > 50; }\n\n// \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0438\u0441\u043a\u0430\nint findFirst(int arr[], int size, int (*condition)(int)) {\n    for (int i = 0; i < size; i++) {\n        if (condition(arr[i])) {\n            return i;  // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n        }\n    }\n    return -1;  // \u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\n}\n\n// \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e\nint countMatching(int arr[], int size, int (*condition)(int)) {\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (condition(arr[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    int data[8] = {15, -42, 8, 73, -29, 56, 91, -34};\n\n    printf("\u041c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430: ");\n    for (int i = 0; i < 8; i++) printf("%d ", data[i]);\n    printf("\\n\\n");\n\n    // \u041f\u043e\u0438\u0441\u043a \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\n    int evenIndex = findFirst(data, 8, findEven);\n    int negativeIndex = findFirst(data, 8, findNegative);\n    int largeIndex = findFirst(data, 8, findLarge);\n\n    printf("\u041f\u0435\u0440\u0432\u043e\u0435 \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e: ");\n    if (evenIndex >= 0) {\n        printf("%d \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 %d\\n", data[evenIndex], evenIndex);\n    } else {\n        printf("\u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\\n");\n    }\n\n    printf("\u041f\u0435\u0440\u0432\u043e\u0435 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435: ");\n    if (negativeIndex >= 0) {\n        printf("%d \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 %d\\n", data[negativeIndex], negativeIndex);\n    } else {\n        printf("\u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\\n");\n    }\n\n    printf("\u041f\u0435\u0440\u0432\u043e\u0435 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 (>50): ");\n    if (largeIndex >= 0) {\n        printf("%d \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 %d\\n", data[largeIndex], largeIndex);\n    } else {\n        printf("\u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\\n");\n    }\n\n    // \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\n    printf("\\n\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430:\\n");\n    printf("\u0427\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b: %d\\n", countMatching(data, 8, findEven));\n    printf("\u041e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445: %d\\n", countMatching(data, 8, findNegative));\n    printf("\u0411\u043e\u043b\u044c\u0448\u0438\u0445 (>50): %d\\n", countMatching(data, 8, findLarge));\n\n    return 0;\n}\n'})})})]}),"\n",(0,r.jsx)(i.h2,{id:"\u0444\u0443\u043d\u043a\u0446\u0438\u0438-\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e-\u0432\u044b\u0437\u043e\u0432\u0430-callbacks",children:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 (callbacks)"}),"\n",(0,r.jsx)(i.h3,{id:"\u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f-\u043e-\u0441\u043e\u0431\u044b\u0442\u0438\u044f\u0445",children:"\u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u0445"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u0422\u0438\u043f\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0445 \u0432\u044b\u0437\u043e\u0432\u043e\u0432\nvoid onOperationStart(char *operation) {\n    printf("\ud83d\udd04 \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c: %s\\n", operation);\n}\n\nvoid onOperationComplete(char *operation) {\n    printf("\u2705 \u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e: %s\\n", operation);\n}\n\nvoid onOperationError(char *operation) {\n    printf("\u274c \u041e\u0448\u0438\u0431\u043a\u0430 \u0432: %s\\n", operation);\n}\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u043c\u0438 \u0432\u044b\u0437\u043e\u0432\u0430\u043c\u0438\nvoid performFileOperation(char *filename, char *operation,\n                         void (*onStart)(char*),\n                         void (*onComplete)(char*),\n                         void (*onError)(char*)) {\n\n    onStart(operation);  // \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u043c \u043e \u043d\u0430\u0447\u0430\u043b\u0435\n\n    // \u0418\u043c\u0438\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\n    printf("\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0444\u0430\u0439\u043b\u043e\u043c: %s\\n", filename);\n\n    // \u0418\u043c\u0438\u0442\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0443\u0441\u043f\u0435\u0445/\u043e\u0448\u0438\u0431\u043a\u0430)\n    int success = (filename[0] != \'X\');  // \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n\n    if (success) {\n        onComplete(operation);  // \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u043c \u043e\u0431 \u0443\u0441\u043f\u0435\u0445\u0435\n    } else {\n        onError(operation);     // \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u043c \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435\n    }\n}\n\nint main() {\n    printf("\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0445 \u0432\u044b\u0437\u043e\u0432\u043e\u0432:\\n");\n\n    performFileOperation("document.txt", "\u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",\n                        onOperationStart, onOperationComplete, onOperationError);\n\n    printf("\\n");\n\n    performFileOperation("Xerror.txt", "\u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",\n                        onOperationStart, onOperationComplete, onOperationError);\n\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(i.h2,{id:"\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",children:"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"}),"\n",(0,r.jsx)(i.h3,{id:"\u0444\u0443\u043d\u043a\u0446\u0438\u0438-\u0432\u044b\u0441\u0448\u0435\u0433\u043e-\u043f\u043e\u0440\u044f\u0434\u043a\u0430",children:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(l.A,{value:"map",label:"\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a \u043c\u0430\u0441\u0441\u0438\u0432\u0443",default:!0,children:(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nint triple(int x) { return x * 3; }\nint addTen(int x) { return x + 10; }\nint negate(int x) { return -x; }\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u044f map \u2014 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443\nvoid mapArray(int source[], int target[], int size, int (*transform)(int), char *transformName) {\n    printf("\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \'%s\':\\n", transformName);\n\n    for (int i = 0; i < size; i++) {\n        target[i] = transform(source[i]);\n        printf("%d \u2192 %d\\n", source[i], target[i]);\n    }\n    printf("\\n");\n}\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u044f filter \u2014 \u043e\u0442\u0431\u0438\u0440\u0430\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e\nint filterArray(int source[], int target[], int size, int (*predicate)(int), char *filterName) {\n    int targetIndex = 0;\n\n    printf("\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \'%s\':\\n", filterName);\n\n    for (int i = 0; i < size; i++) {\n        if (predicate(source[i])) {\n            target[targetIndex] = source[i];\n            printf("\u041f\u0440\u0438\u043d\u044f\u0442: %d\\n", source[i]);\n            targetIndex++;\n        }\n    }\n\n    printf("\u041e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043e: %d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\\n\\n", targetIndex);\n    return targetIndex;\n}\n\n// \u041f\u0440\u0435\u0434\u0438\u043a\u0430\u0442\u044b \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438\nint isPositive(int x) { return x > 0; }\nint isEven(int x) { return x % 2 == 0; }\n\nint main() {\n    int original[6] = {-3, 8, -1, 15, 24, -7};\n    int mapped[6];\n    int filtered[6];\n\n    printf("\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432: ");\n    for (int i = 0; i < 6; i++) printf("%d ", original[i]);\n    printf("\\n\\n");\n\n    // \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\n    mapArray(original, mapped, 6, triple, "\u0443\u0442\u0440\u043e\u0435\u043d\u0438\u0435");\n\n    // \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n    int positiveCount = filterArray(original, filtered, 6, isPositive, "\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435");\n\n    printf("\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430: ");\n    for (int i = 0; i < positiveCount; i++) printf("%d ", filtered[i]);\n    printf("\\n");\n\n    return 0;\n}\n'})})}),(0,r.jsx)(l.A,{value:"reduce",label:"\u0421\u0432\u0435\u0440\u0442\u043a\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430",children:(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0432\u0435\u0440\u0442\u043a\u0438\nint sum(int acc, int val) { return acc + val; }\nint product(int acc, int val) { return acc * val; }\nint maximum(int acc, int val) { return acc > val ? acc : val; }\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0432\u0435\u0440\u0442\u043a\u0438 \u2014 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nint reduceArray(int arr[], int size, int initialValue, int (*operation)(int, int), char *operationName) {\n    int accumulator = initialValue;\n\n    printf("\u0421\u0432\u0435\u0440\u0442\u043a\u0430 \'%s\' (\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: %d):\\n", operationName, initialValue);\n\n    for (int i = 0; i < size; i++) {\n        int oldValue = accumulator;\n        accumulator = operation(accumulator, arr[i]);\n        printf("\u0428\u0430\u0433 %d: %d %s %d = %d\\n", i + 1, oldValue,\n               operationName, arr[i], accumulator);\n    }\n\n    printf("\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: %d\\n\\n", accumulator);\n    return accumulator;\n}\n\nint main() {\n    int numbers[5] = {2, 3, 4, 5, 6};\n\n    printf("\u041c\u0430\u0441\u0441\u0438\u0432: ");\n    for (int i = 0; i < 5; i++) printf("%d ", numbers[i]);\n    printf("\\n\\n");\n\n    // \u0420\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0432\u0435\u0440\u0442\u043a\u0438\n    int totalSum = reduceArray(numbers, 5, 0, sum, "\u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435");\n    int totalProduct = reduceArray(numbers, 5, 1, product, "\u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435");\n    int maxValue = reduceArray(numbers, 5, numbers[0], maximum, "\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c");\n\n    return 0;\n}\n'})})})]}),"\n",(0,r.jsx)(i.h2,{id:"\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f-\u0444\u0443\u043d\u043a\u0446\u0438\u0439",children:"\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439"}),"\n",(0,r.jsx)(i.h3,{id:"\u0446\u0435\u043f\u043e\u0447\u043a\u0438-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438",children:"\u0426\u0435\u043f\u043e\u0447\u043a\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-c",children:'#include <stdio.h>\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\nint addFive(int x) { return x + 5; }\nint multiplyByTwo(int x) { return x * 2; }\nint subtractOne(int x) { return x - 1; }\n\n// \u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u2014 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\nint compose(int value, int (*functions[])(int), int count) {\n    int result = value;\n\n    printf("\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: %d\\n", value);\n\n    for (int i = 0; i < count; i++) {\n        int oldResult = result;\n        result = functions[i](result);\n        printf("\u0428\u0430\u0433 %d: %d \u2192 %d\\n", i + 1, oldResult, result);\n    }\n\n    return result;\n}\n\n// \u041f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nvoid processPipeline(int data[], int size, int (*pipeline[])(int), int stageCount, char *pipelineName) {\n    printf("=== \u041f\u0410\u0419\u041f\u041b\u0410\u0419\u041d: %s ===\\n", pipelineName);\n\n    for (int i = 0; i < size; i++) {\n        printf("\u042d\u043b\u0435\u043c\u0435\u043d\u0442 %d (%d):\\n", i + 1, data[i]);\n        data[i] = compose(data[i], pipeline, stageCount);\n        printf("\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: %d\\n\\n", data[i]);\n    }\n}\n\nint main() {\n    int dataset[4] = {10, 15, 20, 25};\n\n    // \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n    int (*transformPipeline[3])(int) = {addFive, multiplyByTwo, subtractOne};\n\n    printf("\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: ");\n    for (int i = 0; i < 4; i++) printf("%d ", dataset[i]);\n    printf("\\n\\n");\n\n    processPipeline(dataset, 4, transformPipeline, 3, "\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445");\n\n    printf("\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430: ");\n    for (int i = 0; i < 4; i++) printf("%d ", dataset[i]);\n    printf("\\n");\n\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(i.admonition,{title:"\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438",type:"info",children:(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b"})," \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b"})," \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u0445"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430"})," \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f"})," \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 \u043f\u0440\u043e\u0441\u0442\u044b\u0445"]}),"\n"]})}),"\n",(0,r.jsx)(i.admonition,{title:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f",type:"tip",children:(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b"})," \u2014 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430, \u043f\u043e\u0438\u0441\u043a, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u0421\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u043e\u0431\u044b\u0442\u0438\u0439"})," \u2014 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u041f\u043b\u0430\u0433\u0438\u043d\u044b"})," \u2014 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"})," \u2014 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439"]}),"\n"]})}),"\n",(0,r.jsx)(i.admonition,{title:"\u0412\u0430\u0436\u043d\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b",type:"warning",children:(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043d\u0430 NULL"})," \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u0437\u043e\u0432\u043e\u043c"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c"})," \u0441 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435"})," \u0444\u0443\u043d\u043a\u0446\u0438\u0439-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u043e\u0448\u0438\u0431\u043a\u0438"})," \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445"]}),"\n"]})}),"\n",(0,r.jsx)(i.p,{children:"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043a\u0430\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u2014 \u043c\u043e\u0449\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0433\u0438\u0431\u043a\u0438\u0445 \u0438 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432."})]})}function f(n={}){const{wrapper:i}={...(0,a.R)(),...n.components};return i?(0,r.jsx)(i,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},8453:(n,i,e)=>{e.d(i,{R:()=>o,x:()=>l});var t=e(6540);const r={},a=t.createContext(r);function o(n){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function l(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(a.Provider,{value:i},n.children)}},9365:(n,i,e)=>{e.d(i,{A:()=>o});e(6540);var t=e(4164);const r={tabItem:"tabItem_Ymn6"};var a=e(4848);function o({children:n,hidden:i,className:e}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,e),hidden:i,children:n})}}}]);