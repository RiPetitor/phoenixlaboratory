"use strict";(self.webpackChunkphoenix_lab=self.webpackChunkphoenix_lab||[]).push([[8250],{1470:(n,e,t)=>{t.d(e,{A:()=>T});var s=t(6540),i=t(4164),r=t(3104),l=t(6347),c=t(205),a=t(7485),o=t(1682),d=t(679);function u(n){return s.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,s.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function _(n){const{values:e,children:t}=n;return(0,s.useMemo)((()=>{const n=e??function(n){return u(n).map((({props:{value:n,label:e,attributes:t,default:s}})=>({value:n,label:e,attributes:t,default:s})))}(t);return function(n){const e=(0,o.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function p({value:n,tabValues:e}){return e.some((e=>e.value===n))}function h({queryString:n=!1,groupId:e}){const t=(0,l.W6)(),i=function({queryString:n=!1,groupId:e}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,a.aZ)(i),(0,s.useCallback)((n=>{if(!i)return;const e=new URLSearchParams(t.location.search);e.set(i,n),t.replace({...t.location,search:e.toString()})}),[i,t])]}function E(n){const{defaultValue:e,queryString:t=!1,groupId:i}=n,r=_(n),[l,a]=(0,s.useState)((()=>function({defaultValue:n,tabValues:e}){if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=e.find((n=>n.default))??e[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:e,tabValues:r}))),[o,u]=h({queryString:t,groupId:i}),[E,m]=function({groupId:n}){const e=function(n){return n?`docusaurus.tab.${n}`:null}(n),[t,i]=(0,d.Dv)(e);return[t,(0,s.useCallback)((n=>{e&&i.set(n)}),[e,i])]}({groupId:i}),x=(()=>{const n=o??E;return p({value:n,tabValues:r})?n:null})();(0,c.A)((()=>{x&&a(x)}),[x]);return{selectedValue:l,selectValue:(0,s.useCallback)((n=>{if(!p({value:n,tabValues:r}))throw new Error(`Can't select invalid tab value=${n}`);a(n),u(n),m(n)}),[u,m,r]),tabValues:r}}var m=t(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function A({className:n,block:e,selectedValue:t,selectValue:s,tabValues:l}){const c=[],{blockElementScrollPositionUntilNextRender:a}=(0,r.a_)(),o=n=>{const e=n.currentTarget,i=c.indexOf(e),r=l[i].value;r!==t&&(a(e),s(r))},d=n=>{let e=null;switch(n.key){case"Enter":o(n);break;case"ArrowRight":{const t=c.indexOf(n.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(n.currentTarget)-1;e=c[t]??c[c.length-1];break}}e?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":e},n),children:l.map((({value:n,label:e,attributes:s})=>(0,f.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:n=>{c.push(n)},onKeyDown:d,onClick:o,...s,className:(0,i.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":t===n}),children:e??n},n)))})}function S({lazy:n,children:e,selectedValue:t}){const r=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){const n=r.find((n=>n.props.value===t));return n?(0,s.cloneElement)(n,{className:(0,i.A)("margin-top--md",n.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((n,e)=>(0,s.cloneElement)(n,{key:e,hidden:n.props.value!==t})))})}function g(n){const e=E(n);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,f.jsx)(A,{...e,...n}),(0,f.jsx)(S,{...e,...n})]})}function T(n){const e=(0,m.A)();return(0,f.jsx)(g,{...n,children:u(n.children)},String(e))}},8180:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/constants","title":"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","description":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 Rust, \u0438\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","source":"@site/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/03-constants.mdx","sourceDirName":"learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430","slug":"/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/constants","permalink":"/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/constants","draft":false,"unlisted":false,"editUrl":"https://github.com/RiPetitor/phoenixlaboratory/edit/main/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/03-constants.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","description":"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 Rust, \u0438\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","sidebar_position":3},"sidebar":"learnSidebar","previous":{"title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","permalink":"/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/data-types"},"next":{"title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043a\u043e\u0434\u0435","permalink":"/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/comments"}}');var i=t(4848),r=t(8453),l=t(1470),c=t(9365);t(1028);const a={title:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435",description:"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 Rust, \u0438\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f",sidebar_position:3},o="\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435",d={},u=[{value:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b (const)",id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b-const",level:2},{value:"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442",id:"\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435-\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442",level:3},{value:"\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442",id:"\u043f\u0440\u0430\u0432\u0438\u043b\u0430-\u0434\u043b\u044f-\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442",level:3},{value:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f",id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435-\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f",level:3},{value:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\u0445",id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b-\u0432-\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445-\u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\u0445",level:3},{value:"\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (static)",id:"\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435-static",level:2},{value:"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",id:"\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",level:3},{value:"\u041c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435",id:"\u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435",level:3},{value:"\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",id:"\u043b\u0435\u043d\u0438\u0432\u0430\u044f-\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",level:3},{value:"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 const \u0438 static",id:"\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435-const-\u0438-static",level:2},{value:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435",id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435",level:3},{value:"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c const vs static",id:"\u043a\u043e\u0433\u0434\u0430-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c-const-vs-static",level:2},{value:"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u043a\u043e\u0433\u0434\u0430:",id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435-const-\u043a\u043e\u0433\u0434\u0430",level:3},{value:"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 static \u043a\u043e\u0433\u0434\u0430:",id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435-static-\u043a\u043e\u0433\u0434\u0430",level:3},{value:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438",id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b-\u0432\u0440\u0435\u043c\u0435\u043d\u0438-\u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438",level:2},{value:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435-\u0444\u0443\u043d\u043a\u0446\u0438\u0438",level:3},{value:"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f const fn",id:"\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f-const-fn",level:3},{value:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b",id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043f\u0440\u0438\u043c\u0435\u0440\u044b",level:2},{value:"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",id:"\u0441\u0438\u0441\u0442\u0435\u043c\u0430-\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",level:3},{value:"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0435\u0442\u0440\u0438\u043a",id:"\u0441\u0438\u0441\u0442\u0435\u043c\u0430-\u043c\u0435\u0442\u0440\u0438\u043a",level:3},{value:"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438",id:"\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f-\u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438",level:3},{value:"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438",id:"\u043b\u0443\u0447\u0448\u0438\u0435-\u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438",level:2},{value:"1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435",id:"1-\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435-\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435",level:3},{value:"2. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",id:"2-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442-\u0438-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",level:3},{value:"3. \u0418\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b",id:"3-\u0438\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435-\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u0447\u0438\u0441\u0435\u043b",level:3},{value:"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",id:"\u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",level:2},{value:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f",id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u0437\u0430\u0434\u0430\u043d\u0438\u044f",level:3},{value:"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",id:"\u0432\u043e\u043f\u0440\u043e\u0441\u044b-\u0434\u043b\u044f-\u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",level:3},{value:"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438",id:"\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435-\u0441\u0441\u044b\u043b\u043a\u0438",level:3}];function _(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b-\u0438-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435",children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"})}),"\n",(0,i.jsxs)(e.p,{children:["\u0412 \u044d\u0442\u043e\u0439 \u0433\u043b\u0430\u0432\u0435 \u043c\u044b \u0438\u0437\u0443\u0447\u0438\u043c ",(0,i.jsx)(e.strong,{children:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b"})," (",(0,i.jsx)(e.code,{children:"const"}),") \u0438 ",(0,i.jsx)(e.strong,{children:"\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"})," (",(0,i.jsx)(e.code,{children:"static"}),") \u2014 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Rust, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430."]}),"\n",(0,i.jsx)(e.h2,{id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b-const",children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b (const)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b"})," \u0432 Rust \u2014 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u0438 \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043a\u043e\u0434 \u0432\u0435\u0437\u0434\u0435, \u0433\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f."]}),"\n",(0,i.jsx)(e.h3,{id:"\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435-\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442",children:"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442"',children:'// \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043c\u043e\u0434\u0443\u043b\u044f\nconst MAX_POINTS: u32 = 100_000;\nconst PI: f64 = 3.14159265358979323846;\nconst APP_NAME: &str = "My Rust Application";\nconst DEBUG_MODE: bool = true;\n\nfn main() {\n    println!("\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0447\u043a\u0438: {}", MAX_POINTS);\n    println!("\u0427\u0438\u0441\u043b\u043e \u03c0: {}", PI);\n    println!("\u0418\u043c\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: {}", APP_NAME);\n    println!("\u0420\u0435\u0436\u0438\u043c \u043e\u0442\u043b\u0430\u0434\u043a\u0438: {}", DEBUG_MODE);\n\n    // \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n    const LOCAL_CONSTANT: i32 = 42;\n    println!("\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430: {}", LOCAL_CONSTANT);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u043f\u0440\u0430\u0432\u0438\u043b\u0430-\u0434\u043b\u044f-\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442",children:"\u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442"}),"\n",(0,i.jsxs)("div",{style:{display:"grid",gridTemplateColumns:"repeat(auto-fit, minmax(250px, 1fr))",gap:"15px",marginBottom:"20px"},children:[(0,i.jsxs)("div",{style:{border:"1px solid var(--ifm-color-emphasis-300)",padding:"15px",borderRadius:"8px"},children:[(0,i.jsx)("h4",{children:"\ud83d\udcdd \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f"}),(0,i.jsx)("p",{children:"\u0422\u0438\u043f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u044f\u0432\u043d\u043e"}),(0,i.jsx)("code",{children:"const VALUE: i32 = 42;"})]}),(0,i.jsxs)("div",{style:{border:"1px solid var(--ifm-color-emphasis-300)",padding:"15px",borderRadius:"8px"},children:[(0,i.jsx)("h4",{children:"\ud83d\udd12 \u0412\u0441\u0435\u0433\u0434\u0430 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b"}),(0,i.jsxs)("p",{children:["\u041d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ",(0,i.jsx)("code",{children:"mut"})," \u0441 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u043c\u0438"]}),(0,i.jsx)("code",{children:"// const mut X: i32 = 42; // \u274c \u041e\u0448\u0438\u0431\u043a\u0430"})]}),(0,i.jsxs)("div",{style:{border:"1px solid var(--ifm-color-emphasis-300)",padding:"15px",borderRadius:"8px"},children:[(0,i.jsx)("h4",{children:"\u23f0 \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438"}),(0,i.jsx)("p",{children:"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u0443"}),(0,i.jsx)("code",{children:"const RESULT: i32 = 10 + 20;"})]}),(0,i.jsxs)("div",{style:{border:"1px solid var(--ifm-color-emphasis-300)",padding:"15px",borderRadius:"8px"},children:[(0,i.jsx)("h4",{children:"\ud83c\udff7\ufe0f \u0418\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 SCREAMING_SNAKE_CASE"}),(0,i.jsx)("p",{children:"\u041f\u0440\u0438\u043d\u044f\u0442\u043e\u0435 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442"}),(0,i.jsx)("code",{children:"const MAX_BUFFER_SIZE: usize = 8192;"})]})]}),"\n",(0,i.jsx)(e.h3,{id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435-\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f",children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f"}),"\n",(0,i.jsx)(e.p,{children:"Rust \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u0445 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(c.A,{value:"arithmetic",label:"\u0410\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0410\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u043a\u0430 \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u0445"',children:'const SECONDS_IN_MINUTE: u32 = 60;\nconst MINUTES_IN_HOUR: u32 = 60;\nconst HOURS_IN_DAY: u32 = 24;\n\n// \u0421\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\nconst SECONDS_IN_HOUR: u32 = SECONDS_IN_MINUTE * MINUTES_IN_HOUR;\nconst SECONDS_IN_DAY: u32 = SECONDS_IN_HOUR * HOURS_IN_DAY;\nconst MINUTES_IN_DAY: u32 = MINUTES_IN_HOUR * HOURS_IN_DAY;\n\n// \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\nconst CIRCLE_AREA: f64 = PI * 5.0 * 5.0;  // \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0443\u0433\u0430 \u0441 \u0440\u0430\u0434\u0438\u0443\u0441\u043e\u043c 5\nconst SQUARE_ROOT_OF_2: f64 = 1.4142135623730951;\n\nfn main() {\n    println!("\u0421\u0435\u043a\u0443\u043d\u0434 \u0432 \u0447\u0430\u0441\u0435: {}", SECONDS_IN_HOUR);\n    println!("\u0421\u0435\u043a\u0443\u043d\u0434 \u0432 \u0434\u043d\u0435: {}", SECONDS_IN_DAY);\n    println!("\u041c\u0438\u043d\u0443\u0442 \u0432 \u0434\u043d\u0435: {}", MINUTES_IN_DAY);\n    println!("\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0443\u0433\u0430: {}", CIRCLE_AREA);\n    println!("\u221a2 \u2248 {}", SQUARE_ROOT_OF_2);\n}\n'})})}),(0,i.jsx)(c.A,{value:"bitwise",label:"\u041f\u043e\u0431\u0438\u0442\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0411\u0438\u0442\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u0445"',children:'const FLAG_A: u32 = 1 << 0;      // 0b00000001\nconst FLAG_B: u32 = 1 << 1;      // 0b00000010\nconst FLAG_C: u32 = 1 << 2;      // 0b00000100\nconst FLAG_D: u32 = 1 << 3;      // 0b00001000\n\n// \u041a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0444\u043b\u0430\u0433\u043e\u0432\nconst FLAGS_AB: u32 = FLAG_A | FLAG_B;        // 0b00000011\nconst FLAGS_ALL: u32 = FLAG_A | FLAG_B | FLAG_C | FLAG_D; // 0b00001111\n\n// \u041c\u0430\u0441\u043a\u0438\nconst MASK_LOWER_NIBBLE: u8 = 0x0F;          // 0b00001111\nconst MASK_UPPER_NIBBLE: u8 = 0xF0;          // 0b11110000\nconst MASK_FULL: u8 = MASK_LOWER_NIBBLE | MASK_UPPER_NIBBLE; // 0b11111111\n\nfn main() {\n    println!("\u0424\u043b\u0430\u0433 A: {:08b}", FLAG_A);\n    println!("\u0424\u043b\u0430\u0433 B: {:08b}", FLAG_B);\n    println!("\u0424\u043b\u0430\u0433\u0438 A|B: {:08b}", FLAGS_AB);\n    println!("\u0412\u0441\u0435 \u0444\u043b\u0430\u0433\u0438: {:08b}", FLAGS_ALL);\n\n    println!("\u041d\u0438\u0436\u043d\u044f\u044f \u0442\u0435\u0442\u0440\u0430\u0434\u0430: {:08b}", MASK_LOWER_NIBBLE);\n    println!("\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0442\u0435\u0442\u0440\u0430\u0434\u0430: {:08b}", MASK_UPPER_NIBBLE);\n    println!("\u041f\u043e\u043b\u043d\u0430\u044f \u043c\u0430\u0441\u043a\u0430: {:08b}", MASK_FULL);\n}\n'})})}),(0,i.jsx)(c.A,{value:"arrays",label:"\u041c\u0430\u0441\u0441\u0438\u0432\u044b \u0438 \u0441\u0442\u0440\u043e\u043a\u0438",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0438 \u0441\u0442\u0440\u043e\u043a\u0438"',children:'const VOWELS: [char; 5] = [\'a\', \'e\', \'i\', \'o\', \'u\'];\nconst FIBONACCI: [u32; 10] = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\nconst POWERS_OF_TWO: [u64; 8] = [1, 2, 4, 8, 16, 32, 64, 128];\n\n// \u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\nconst GREETING: &str = "\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!";\nconst ERROR_MESSAGE: &str = "\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430";\nconst VERSION: &str = "1.0.0";\n\n// \u0411\u0430\u0439\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\nconst MAGIC_BYTES: &[u8] = b"RUST";\nconst HEX_DUMP: &[u8] = b"\\x89PNG\\r\\n\\x1a\\n"; // PNG \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n\nfn main() {\n    println!("\u0413\u043b\u0430\u0441\u043d\u044b\u0435: {:?}", VOWELS);\n    println!("\u0427\u0438\u0441\u043b\u0430 \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438: {:?}", FIBONACCI);\n    println!("\u0421\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u043e\u0439\u043a\u0438: {:?}", POWERS_OF_TWO);\n\n    println!("\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435: {}", GREETING);\n    println!("\u0412\u0435\u0440\u0441\u0438\u044f: {}", VERSION);\n\n    println!("\u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0431\u0430\u0439\u0442\u044b: {:?}", MAGIC_BYTES);\n    println!("Hex \u0434\u0430\u043c\u043f: {:?}", HEX_DUMP);\n\n    // \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    println!("\u041f\u0435\u0440\u0432\u0430\u044f \u0433\u043b\u0430\u0441\u043d\u0430\u044f: {}", VOWELS[0]);\n    println!("10-\u0435 \u0447\u0438\u0441\u043b\u043e \u0424\u0438\u0431\u043e\u043d\u0430\u0447\u0447\u0438: {}", FIBONACCI[9]);\n}\n'})})})]}),"\n",(0,i.jsx)(e.h3,{id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b-\u0432-\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445-\u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\u0445",children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\u0445"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445"',children:'// \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043c\u043e\u0434\u0443\u043b\u044f\nconst BUFFER_SIZE: usize = 8192;\nconst MAX_CONNECTIONS: u32 = 100;\n\nstruct Config {\n    buffer_size: usize,\n    max_connections: u32,\n    timeout_seconds: u64,\n}\n\nimpl Config {\n    // \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432\u043d\u0443\u0442\u0440\u0438 impl \u0431\u043b\u043e\u043a\u0430\n    const DEFAULT_TIMEOUT: u64 = 30;\n    const MAX_TIMEOUT: u64 = 300;\n\n    fn new() -> Self {\n        Self {\n            buffer_size: BUFFER_SIZE,  // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\n            max_connections: MAX_CONNECTIONS,\n            timeout_seconds: Self::DEFAULT_TIMEOUT, // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b impl\n        }\n    }\n\n    fn with_timeout(mut self, timeout: u64) -> Self {\n        // \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n        const MIN_TIMEOUT: u64 = 1;\n\n        self.timeout_seconds = timeout.clamp(MIN_TIMEOUT, Self::MAX_TIMEOUT);\n        self\n    }\n}\n\nfn main() {\n    let config = Config::new()\n        .with_timeout(60);\n\n    println!("\u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u0443\u0444\u0435\u0440\u0430: {}", config.buffer_size);\n    println!("\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: {}", config.max_connections);\n    println!("\u0422\u0430\u0439\u043c\u0430\u0443\u0442: {} \u0441\u0435\u043a\u0443\u043d\u0434", config.timeout_seconds);\n\n    // \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432 match \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445\n    const SUCCESS_CODE: i32 = 0;\n    const ERROR_CODE: i32 = 1;\n\n    let result = SUCCESS_CODE;\n    match result {\n        SUCCESS_CODE => println!("\u0423\u0441\u043f\u0435\u0445!"),\n        ERROR_CODE => println!("\u041e\u0448\u0438\u0431\u043a\u0430!"),\n        _ => println!("\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043a\u043e\u0434"),\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435-static",children:"\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (static)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"})," \u0438\u043c\u0435\u044e\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b."]}),"\n",(0,i.jsx)(e.h3,{id:"\u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",children:"\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"',children:'static GLOBAL_COUNTER: std::sync::atomic::AtomicUsize =\n    std::sync::atomic::AtomicUsize::new(0);\n\nstatic APP_VERSION: &str = "2.1.0";\nstatic MAX_RETRIES: u8 = 3;\nstatic PI_STATIC: f64 = 3.14159265358979323846;\n\nfn main() {\n    println!("\u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: {}", APP_VERSION);\n    println!("\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432: {}", MAX_RETRIES);\n    println!("\u03c0 (\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f): {}", PI_STATIC);\n\n    // \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0430\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u043c \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u043e\u043c\n    let old_value = GLOBAL_COUNTER.fetch_add(1, std::sync::atomic::Ordering::Relaxed);\n    println!("\u0421\u0447\u0451\u0442\u0447\u0438\u043a: {} -> {}", old_value, old_value + 1);\n\n    // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    let version_ptr = &APP_VERSION as *const &str;\n    println!("\u0410\u0434\u0440\u0435\u0441 APP_VERSION: {:p}", version_ptr);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435",children:"\u041c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"}),"\n",(0,i.jsx)(e.admonition,{title:"\u041d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c",type:"danger",children:(0,i.jsxs)(e.p,{children:["\u041c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b \u0438 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f ",(0,i.jsx)(e.code,{children:"unsafe"})," \u0431\u043b\u043e\u043a\u043e\u0432!"]})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u041c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"',children:'static mut GLOBAL_STATE: i32 = 0;\nstatic mut MESSAGE: &str = "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435";\n\n// \u0411\u043e\u043b\u0435\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 \u0441 Mutex\nuse std::sync::Mutex;\nstatic SAFE_COUNTER: Mutex<i32> = Mutex::new(0);\n\nfn main() {\n    // \u041d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    unsafe {\n        GLOBAL_STATE += 1;\n        println!("\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435: {}", GLOBAL_STATE);\n\n        MESSAGE = "\u0418\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435";\n        println!("\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: {}", MESSAGE);\n    }\n\n    // \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 Mutex\n    {\n        let mut counter = SAFE_COUNTER.lock().unwrap();\n        *counter += 1;\n        println!("\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0441\u0447\u0451\u0442\u0447\u0438\u043a: {}", *counter);\n    } // Mutex \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u0442\u0441\u044f\n\n    // \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u043c\u0443 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0443\n    use std::thread;\n\n    let handles: Vec<_> = (0..5).map(|i| {\n        thread::spawn(move || {\n            let mut counter = SAFE_COUNTER.lock().unwrap();\n            *counter += 1;\n            println!("\u041f\u043e\u0442\u043e\u043a {} \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043b \u0441\u0447\u0451\u0442\u0447\u0438\u043a \u0434\u043e {}", i, *counter);\n        })\n    }).collect();\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u043b\u0435\u043d\u0438\u0432\u0430\u044f-\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",children:"\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445"}),"\n",(0,i.jsx)(e.p,{children:"\u0414\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0435\u043d\u0438\u0432\u0443\u044e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(c.A,{value:"once-cell",label:"std::sync::OnceLock",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u041b\u0435\u043d\u0438\u0432\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441 OnceLock"',children:'use std::sync::OnceLock;\nuse std::collections::HashMap;\n\n// \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441 \u043b\u0435\u043d\u0438\u0432\u043e\u0439 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439\nstatic SETTINGS: OnceLock<HashMap<String, String>> = OnceLock::new();\n\nfn get_settings() -> &\'static HashMap<String, String> {\n    SETTINGS.get_or_init(|| {\n        let mut map = HashMap::new();\n        map.insert("database_url".to_string(), "postgres://localhost".to_string());\n        map.insert("port".to_string(), "8080".to_string());\n        map.insert("debug".to_string(), "true".to_string());\n        map\n    })\n}\n\nfn main() {\n    // \u041f\u0435\u0440\u0432\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 HashMap\n    let settings = get_settings();\n    println!("\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: {}", settings.get("database_url").unwrap());\n    println!("\u041f\u043e\u0440\u0442: {}", settings.get("port").unwrap());\n\n    // \u041f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0443\u0436\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    let settings_again = get_settings();\n    println!("\u041e\u0442\u043b\u0430\u0434\u043a\u0430: {}", settings_again.get("debug").unwrap());\n\n    // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\n    println!("\u0422\u043e\u0442 \u0436\u0435 \u043e\u0431\u044a\u0435\u043a\u0442: {}",\n             std::ptr::eq(settings, settings_again));\n}\n'})})}),(0,i.jsx)(c.A,{value:"lazy-static",label:"\u0412\u043d\u0435\u0448\u043d\u044f\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 lazy_static",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 lazy_static (\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 Cargo.toml)"',children:'// \u0412 Cargo.toml:\n// [dependencies]\n// lazy_static = "1.4"\n\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\nuse std::sync::Mutex;\n\nlazy_static! {\n    static ref GLOBAL_CONFIG: HashMap<&\'static str, &\'static str> = {\n        let mut map = HashMap::new();\n        map.insert("app_name", "My Rust App");\n        map.insert("version", "1.0.0");\n        map.insert("author", "Rust Developer");\n        map\n    };\n\n    static ref SHARED_VECTOR: Mutex<Vec<i32>> = {\n        Mutex::new(vec![1, 2, 3, 4, 5])\n    };\n}\n\nfn main() {\n    // \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0439 \u043b\u0435\u043d\u0438\u0432\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    println!("\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: {}", GLOBAL_CONFIG.get("app_name").unwrap());\n    println!("\u0412\u0435\u0440\u0441\u0438\u044f: {}", GLOBAL_CONFIG.get("version").unwrap());\n\n    // \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0439 \u043b\u0435\u043d\u0438\u0432\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    {\n        let mut vec = SHARED_VECTOR.lock().unwrap();\n        vec.push(6);\n        println!("\u0412\u0435\u043a\u0442\u043e\u0440: {:?}", *vec);\n    }\n\n    // \u0418\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430\n    use std::thread;\n    let handle = thread::spawn(|| {\n        let mut vec = SHARED_VECTOR.lock().unwrap();\n        vec.push(7);\n        println!("\u0418\u0437 \u043f\u043e\u0442\u043e\u043a\u0430: {:?}", *vec);\n    });\n\n    handle.join().unwrap();\n}\n'})})}),(0,i.jsx)(c.A,{value:"once",label:"std::sync::Once",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 std::sync::Once \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"',children:'use std::sync::{Once, ONCE_INIT};\n\nstatic INIT: Once = ONCE_INIT;\nstatic mut INITIALIZED_VALUE: Option<String> = None;\n\nfn get_initialized_value() -> &\'static str {\n    unsafe {\n        INIT.call_once(|| {\n            // \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437\n            println!("\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f...");\n            INITIALIZED_VALUE = Some("\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435".to_string());\n        });\n\n        INITIALIZED_VALUE.as_ref().unwrap()\n    }\n}\n\nfn main() {\n    println!("\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432:");\n    println!("{}", get_initialized_value());\n\n    println!("\u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u044b\u0437\u043e\u0432:");\n    println!("{}", get_initialized_value());\n\n    println!("\u0422\u0440\u0435\u0442\u0438\u0439 \u0432\u044b\u0437\u043e\u0432:");\n    println!("{}", get_initialized_value());\n\n    // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0451\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u044b\u0437\u043e\u0432\u0435\n}\n'})})})]}),"\n",(0,i.jsx)(e.h2,{id:"\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435-const-\u0438-static",children:"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 const \u0438 static"}),"\n",(0,i.jsxs)(e.p,{children:["\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 ",(0,i.jsx)(e.code,{children:"const"})," \u0438 ",(0,i.jsx)(e.code,{children:"static"})," \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u043e:"]}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"\u0410\u0441\u043f\u0435\u043a\u0442"}),(0,i.jsx)("th",{children:"const"}),(0,i.jsx)("th",{children:"static"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f"})}),(0,i.jsx)("td",{children:"\u0412\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438"}),(0,i.jsx)("td",{children:"\u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438"})}),(0,i.jsx)("td",{children:"\u0412\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u0434 (inlined)"}),(0,i.jsx)("td",{children:"\u0424\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"\u041c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"})}),(0,i.jsx)("td",{children:"\u0412\u0441\u0435\u0433\u0434\u0430 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b"}),(0,i.jsx)("td",{children:"\u041c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u043c\u0438 (unsafe)"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"\u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430"})}),(0,i.jsx)("td",{children:"\u041c\u043e\u0436\u0435\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440"}),(0,i.jsx)("td",{children:"\u041e\u0434\u043d\u0430 \u043a\u043e\u043f\u0438\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438"})}),(0,i.jsx)("td",{children:"\u041a\u043e\u043f\u0438\u044f \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"}),(0,i.jsx)("td",{children:"\u041e\u0434\u043d\u043e \u043c\u0435\u0441\u0442\u043e \u0432 \u043f\u0430\u043c\u044f\u0442\u0438"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430"})}),(0,i.jsx)("td",{children:"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e"}),(0,i.jsx)("td",{children:"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("strong",{children:"\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c"})}),(0,i.jsx)("td",{children:"\u041d\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c"}),(0,i.jsx)("td",{children:"\u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f mut"})]})]})]}),"\n",(0,i.jsx)(e.h3,{id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435",children:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 const \u0438 static"',children:'const CONST_VALUE: i32 = 42;\nstatic STATIC_VALUE: i32 = 42;\n\nfn main() {\n    // \u041d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\n    // let const_ptr = &CONST_VALUE as *const i32; // \u274c \u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\u0445\n\n    // \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0434\u0440\u0435\u0441 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    let static_ptr = &STATIC_VALUE as *const i32;\n    println!("\u0410\u0434\u0440\u0435\u0441 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439: {:p}", static_ptr);\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f inlining \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\n    let array_const = [CONST_VALUE; 3]; // \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043e\n    let array_static = [STATIC_VALUE; 3]; // \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043e \u0438\u0437 \u043f\u0430\u043c\u044f\u0442\u0438\n\n    println!("\u041c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439: {:?}", array_const);\n    println!("\u041c\u0430\u0441\u0441\u0438\u0432 \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439: {:?}", array_static);\n\n    // \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f\n    for i in 0..5 {\n        // CONST_VALUE \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u0430\u0436\u0434\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n        println!("\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430 #{}: {}", i, CONST_VALUE);\n\n        // STATIC_VALUE \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438\n        println!("\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f #{}: {}", i, STATIC_VALUE);\n    }\n}\n\n// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 inlining\nfn use_const() -> i32 {\n    CONST_VALUE * 2  // \u041a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e \u0432 84\n}\n\nfn use_static() -> i32 {\n    STATIC_VALUE * 2  // \u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0430\u043c\u044f\u0442\u0438\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u043a\u043e\u0433\u0434\u0430-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c-const-vs-static",children:"\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c const vs static"}),"\n",(0,i.jsx)(e.h3,{id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435-const-\u043a\u043e\u0433\u0434\u0430",children:"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 const \u043a\u043e\u0433\u0434\u0430:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u2705 \u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u0434\u043b\u044f const"',children:'// \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\nconst PI: f64 = 3.14159265358979323846;\nconst E: f64 = 2.71828182845904523536;\n\n// \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nconst MAX_BUFFER_SIZE: usize = 8192;\nconst DEFAULT_TIMEOUT: u64 = 30;\n\n// \u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430\nconst HTTP_OK: u16 = 200;\nconst HTTP_NOT_FOUND: u16 = 404;\n\n// \u0411\u0438\u0442\u043e\u0432\u044b\u0435 \u043c\u0430\u0441\u043a\u0438\nconst READ_PERMISSION: u8 = 0b100;\nconst WRITE_PERMISSION: u8 = 0b010;\nconst EXECUTE_PERMISSION: u8 = 0b001;\n\nfn main() {\n    let area = PI * 5.0 * 5.0;\n    println!("\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0443\u0433\u0430: {}", area);\n\n    let permissions = READ_PERMISSION | WRITE_PERMISSION;\n    println!("\u041f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430: {:03b}", permissions);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435-static-\u043a\u043e\u0433\u0434\u0430",children:"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 static \u043a\u043e\u0433\u0434\u0430:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u2705 \u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u0434\u043b\u044f static"',children:'use std::sync::atomic::{AtomicUsize, Ordering};\nuse std::sync::Mutex;\n\n// \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0438\nstatic REQUEST_COUNTER: AtomicUsize = AtomicUsize::new(0);\n\n// \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 (\u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0435)\nstatic APPLICATION_NAME: &str = "My Web Server";\nstatic BUILD_VERSION: &str = env!("CARGO_PKG_VERSION");\n\n// \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u0441 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0435\u0439)\nstatic SHARED_DATA: Mutex<Vec<String>> = Mutex::new(Vec::new());\n\n// \u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nstatic LOOKUP_TABLE: [u64; 1000] = [0; 1000]; // \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0443\u043b\u044f\u043c\u0438\n\nfn increment_requests() {\n    REQUEST_COUNTER.fetch_add(1, Ordering::Relaxed);\n}\n\nfn get_request_count() -> usize {\n    REQUEST_COUNTER.load(Ordering::Relaxed)\n}\n\nfn main() {\n    println!("\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435: {}", APPLICATION_NAME);\n    println!("\u0412\u0435\u0440\u0441\u0438\u044f: {}", BUILD_VERSION);\n\n    // \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    for _ in 0..5 {\n        increment_requests();\n    }\n\n    println!("\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: {}", get_request_count());\n\n    // \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n    {\n        let mut data = SHARED_DATA.lock().unwrap();\n        data.push("\u041d\u043e\u0432\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c".to_string());\n        println!("\u0417\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 shared data: {}", data.len());\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b-\u0432\u0440\u0435\u043c\u0435\u043d\u0438-\u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438",children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438"}),"\n",(0,i.jsxs)(e.p,{children:["Rust \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ",(0,i.jsx)(e.code,{children:"const fn"}),":"]}),"\n",(0,i.jsx)(e.h3,{id:"\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435-\u0444\u0443\u043d\u043a\u0446\u0438\u0438",children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 (const fn)"',children:'const fn factorial(n: u64) -> u64 {\n    if n <= 1 {\n        1\n    } else {\n        n * factorial(n - 1)\n    }\n}\n\nconst fn fibonacci(n: u32) -> u64 {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => fibonacci(n - 1) + fibonacci(n - 2),\n    }\n}\n\nconst fn is_power_of_two(n: u32) -> bool {\n    n != 0 && (n & (n - 1)) == 0\n}\n\n// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 const fn \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u0445\nconst FACTORIAL_10: u64 = factorial(10);\nconst FIB_20: u64 = fibonacci(20);\nconst IS_POWER_OF_TWO_16: bool = is_power_of_two(16);\n\nfn main() {\n    println!("10! = {}", FACTORIAL_10);           // 3628800\n    println!("fib(20) = {}", FIB_20);             // 6765\n    println!("16 - \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0434\u0432\u043e\u0439\u043a\u0438: {}", IS_POWER_OF_TWO_16); // true\n\n    // \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c const fn \u0438 \u0432 runtime\n    let runtime_factorial = factorial(5);\n    println!("5! = {}", runtime_factorial);       // 120\n\n    // \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432\n    const ARRAY_SIZE: usize = factorial(4) as usize;\n    let buffer: [u8; ARRAY_SIZE] = [0; ARRAY_SIZE];\n    println!("\u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430: {}", buffer.len()); // 24\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f-const-fn",children:"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f const fn"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438 \u043d\u0435\u043b\u044c\u0437\u044f \u0432 const fn"',children:'// \u2705 \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0432 const fn\nconst fn allowed_operations(x: i32, y: i32) -> i32 {\n    // \u0410\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\n    let sum = x + y;\n    let product = x * y;\n\n    // \u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n    let result = if x > y { sum } else { product };\n\n    // \u0426\u0438\u043a\u043b\u044b\n    let mut counter = 0;\n    let mut i = 0;\n    while i < 10 {\n        counter += 1;\n        i += 1;\n    }\n\n    // Match \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n    match result {\n        0 => counter,\n        _ => result + counter,\n    }\n}\n\n// \u274c \u041d\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0432 const fn (\u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f)\n/*\nconst fn not_allowed() {\n    // \u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438\n    let v = Vec::new(); // \u274c\n\n    // \u0412\u044b\u0437\u043e\u0432 \u043d\u0435-const \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n    println!("Hello"); // \u274c\n\n    // \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c\u0438 (\u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432)\n    let ptr = &42 as *const i32; // \u274c\n\n    // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\n    std::thread::sleep(std::time::Duration::from_secs(1)); // \u274c\n}\n*/\n\nconst COMPUTED_VALUE: i32 = allowed_operations(10, 20);\n\nfn main() {\n    println!("\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: {}", COMPUTED_VALUE);\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u043f\u0440\u0438\u043c\u0435\u0440\u044b",children:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b"}),"\n",(0,i.jsx)(e.h3,{id:"\u0441\u0438\u0441\u0442\u0435\u043c\u0430-\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438",children:"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438"',children:'use std::sync::OnceLock;\nuse std::collections::HashMap;\n\n// \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\nconst DEFAULT_PORT: u16 = 8080;\nconst DEFAULT_HOST: &str = "127.0.0.1";\nconst DEFAULT_MAX_CONNECTIONS: u32 = 1000;\nconst DEFAULT_TIMEOUT_MS: u64 = 5000;\n\n// \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439\nconst MIN_PORT: u16 = 1024;\nconst MAX_PORT: u16 = 65535;\nconst MIN_CONNECTIONS: u32 = 1;\nconst MAX_CONNECTIONS: u32 = 10000;\n\n// \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0441 \u043b\u0435\u043d\u0438\u0432\u043e\u0439 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439\nstatic CONFIG: OnceLock<AppConfig> = OnceLock::new();\n\n#[derive(Debug)]\nstruct AppConfig {\n    host: String,\n    port: u16,\n    max_connections: u32,\n    timeout_ms: u64,\n    features: HashMap<String, bool>,\n}\n\nimpl AppConfig {\n    const fn validate_port(port: u16) -> bool {\n        port >= MIN_PORT && port <= MAX_PORT\n    }\n\n    const fn validate_connections(connections: u32) -> bool {\n        connections >= MIN_CONNECTIONS && connections <= MAX_CONNECTIONS\n    }\n\n    fn new() -> Self {\n        let mut features = HashMap::new();\n        features.insert("logging".to_string(), true);\n        features.insert("metrics".to_string(), false);\n        features.insert("debug".to_string(), cfg!(debug_assertions));\n\n        Self {\n            host: DEFAULT_HOST.to_string(),\n            port: DEFAULT_PORT,\n            max_connections: DEFAULT_MAX_CONNECTIONS,\n            timeout_ms: DEFAULT_TIMEOUT_MS,\n            features,\n        }\n    }\n\n    fn load_from_env() -> Self {\n        let mut config = Self::new();\n\n        // \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n        if let Ok(port_str) = std::env::var("APP_PORT") {\n            if let Ok(port) = port_str.parse::<u16>() {\n                if Self::validate_port(port) {\n                    config.port = port;\n                }\n            }\n        }\n\n        if let Ok(host) = std::env::var("APP_HOST") {\n            config.host = host;\n        }\n\n        if let Ok(max_conn_str) = std::env::var("APP_MAX_CONNECTIONS") {\n            if let Ok(max_conn) = max_conn_str.parse::<u32>() {\n                if Self::validate_connections(max_conn) {\n                    config.max_connections = max_conn;\n                }\n            }\n        }\n\n        config\n    }\n}\n\nfn get_config() -> &\'static AppConfig {\n    CONFIG.get_or_init(AppConfig::load_from_env)\n}\n\nfn main() {\n    // \u041f\u0435\u0440\u0432\u043e\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e\n    let config = get_config();\n    println!("\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:");\n    println!("  \u0425\u043e\u0441\u0442: {}", config.host);\n    println!("  \u041f\u043e\u0440\u0442: {}", config.port);\n    println!("  \u041c\u0430\u043a\u0441. \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439: {}", config.max_connections);\n    println!("  \u0422\u0430\u0439\u043c\u0430\u0443\u0442: {} \u043c\u0441", config.timeout_ms);\n\n    println!("  \u0424\u0443\u043d\u043a\u0446\u0438\u0438:");\n    for (feature, enabled) in &config.features {\n        println!("    {}: {}", feature, if *enabled { "\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430" } else { "\u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430" });\n    }\n\n    // \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\n    println!("\\n\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f:");\n    println!("  \u041f\u043e\u0440\u0442 80 \u0432\u0430\u043b\u0438\u0434\u0435\u043d: {}", AppConfig::validate_port(80));\n    println!("  \u041f\u043e\u0440\u0442 8080 \u0432\u0430\u043b\u0438\u0434\u0435\u043d: {}", AppConfig::validate_port(8080));\n    println!("  1000000 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0432\u0430\u043b\u0438\u0434\u043d\u043e: {}", AppConfig::validate_connections(1000000));\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u0441\u0438\u0441\u0442\u0435\u043c\u0430-\u043c\u0435\u0442\u0440\u0438\u043a",children:"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0435\u0442\u0440\u0438\u043a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0435\u0442\u0440\u0438\u043a"',children:'use std::sync::atomic::{AtomicU64, AtomicUsize, Ordering};\nuse std::time::{Duration, Instant};\nuse std::sync::OnceLock;\n\n// \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u0442\u0440\u0438\u043a\nconst METRICS_UPDATE_INTERVAL_MS: u64 = 1000;\nconst MAX_RESPONSE_TIME_MS: u64 = 30000;\n\n// \u0410\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u0435 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u043c\u0435\u0442\u0440\u0438\u043a\nstatic REQUESTS_TOTAL: AtomicU64 = AtomicU64::new(0);\nstatic REQUESTS_SUCCESS: AtomicU64 = AtomicU64::new(0);\nstatic REQUESTS_ERROR: AtomicU64 = AtomicU64::new(0);\nstatic RESPONSE_TIME_TOTAL_MS: AtomicU64 = AtomicU64::new(0);\nstatic ACTIVE_CONNECTIONS: AtomicUsize = AtomicUsize::new(0);\n\n// \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441\u0442\u0430\u0440\u0442\u0430\nstatic START_TIME: OnceLock<Instant> = OnceLock::new();\n\nstruct Metrics;\n\nimpl Metrics {\n    fn init() {\n        START_TIME.get_or_init(Instant::now);\n    }\n\n    fn record_request_start() {\n        REQUESTS_TOTAL.fetch_add(1, Ordering::Relaxed);\n        ACTIVE_CONNECTIONS.fetch_add(1, Ordering::Relaxed);\n    }\n\n    fn record_request_end(success: bool, duration: Duration) {\n        ACTIVE_CONNECTIONS.fetch_sub(1, Ordering::Relaxed);\n\n        if success {\n            REQUESTS_SUCCESS.fetch_add(1, Ordering::Relaxed);\n        } else {\n            REQUESTS_ERROR.fetch_add(1, Ordering::Relaxed);\n        }\n\n        let duration_ms = duration.as_millis() as u64;\n        RESPONSE_TIME_TOTAL_MS.fetch_add(duration_ms, Ordering::Relaxed);\n    }\n\n    fn get_stats() -> MetricsSnapshot {\n        let total = REQUESTS_TOTAL.load(Ordering::Relaxed);\n        let success = REQUESTS_SUCCESS.load(Ordering::Relaxed);\n        let error = REQUESTS_ERROR.load(Ordering::Relaxed);\n        let response_time_total = RESPONSE_TIME_TOTAL_MS.load(Ordering::Relaxed);\n        let active = ACTIVE_CONNECTIONS.load(Ordering::Relaxed);\n\n        let uptime = START_TIME.get()\n            .map(|start| start.elapsed())\n            .unwrap_or(Duration::ZERO);\n\n        let avg_response_time = if total > 0 {\n            response_time_total / total\n        } else {\n            0\n        };\n\n        MetricsSnapshot {\n            requests_total: total,\n            requests_success: success,\n            requests_error: error,\n            success_rate: if total > 0 { success as f64 / total as f64 } else { 0.0 },\n            average_response_time_ms: avg_response_time,\n            active_connections: active,\n            uptime_seconds: uptime.as_secs(),\n        }\n    }\n\n    fn reset() {\n        REQUESTS_TOTAL.store(0, Ordering::Relaxed);\n        REQUESTS_SUCCESS.store(0, Ordering::Relaxed);\n        REQUESTS_ERROR.store(0, Ordering::Relaxed);\n        RESPONSE_TIME_TOTAL_MS.store(0, Ordering::Relaxed);\n        // ACTIVE_CONNECTIONS \u043d\u0435 \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c - \u043e\u043d\u0430 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n    }\n}\n\n#[derive(Debug)]\nstruct MetricsSnapshot {\n    requests_total: u64,\n    requests_success: u64,\n    requests_error: u64,\n    success_rate: f64,\n    average_response_time_ms: u64,\n    active_connections: usize,\n    uptime_seconds: u64,\n}\n\n// \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\nfn simulate_request(id: u32, will_succeed: bool) {\n    println!("\u0417\u0430\u043f\u0440\u043e\u0441 {} \u043d\u0430\u0447\u0430\u0442", id);\n    Metrics::record_request_start();\n\n    let start = Instant::now();\n\n    // \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b\n    std::thread::sleep(Duration::from_millis(10 + (id % 100) as u64));\n\n    let duration = start.elapsed();\n    Metrics::record_request_end(will_succeed, duration);\n\n    println!("\u0417\u0430\u043f\u0440\u043e\u0441 {} \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d ({})",\n             id,\n             if will_succeed { "\u0443\u0441\u043f\u0435\u0448\u043d\u043e" } else { "\u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439" });\n}\n\nfn main() {\n    Metrics::init();\n\n    println!("\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043c\u0435\u0442\u0440\u0438\u043a...\\n");\n\n    // \u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    use std::thread;\n\n    let handles: Vec<_> = (0..10).map(|i| {\n        thread::spawn(move || {\n            simulate_request(i, i % 4 != 0); // 75% \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n        })\n    }).collect();\n\n    // \u0416\u0434\u0451\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\n    let stats = Metrics::get_stats();\n    println!("\\n=== \u041c\u0415\u0422\u0420\u0418\u041a\u0418 ===");\n    println!("\u0412\u0441\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: {}", stats.requests_total);\n    println!("\u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: {}", stats.requests_success);\n    println!("\u041e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: {}", stats.requests_error);\n    println!("\u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0443\u0441\u043f\u0435\u0445\u0430: {:.1}%", stats.success_rate * 100.0);\n    println!("\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u0432\u0435\u0442\u0430: {} \u043c\u0441", stats.average_response_time_ms);\n    println!("\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439: {}", stats.active_connections);\n    println!("\u0412\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b: {} \u0441\u0435\u043a\u0443\u043d\u0434", stats.uptime_seconds);\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0431\u0440\u043e\u0441\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\n    println!("\\n\u0421\u0431\u0440\u043e\u0441 \u043c\u0435\u0442\u0440\u0438\u043a...");\n    Metrics::reset();\n    let reset_stats = Metrics::get_stats();\n    println!("\u041f\u043e\u0441\u043b\u0435 \u0441\u0431\u0440\u043e\u0441\u0430 - \u0432\u0441\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: {}", reset_stats.requests_total);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f-\u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438",children:"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u0435\u0436\u0438\u043c\u043e\u0432 \u0441\u0431\u043e\u0440\u043a\u0438"',children:'// \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b, \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0438\u0435 \u043e\u0442 \u0440\u0435\u0436\u0438\u043c\u0430 \u0441\u0431\u043e\u0440\u043a\u0438\nconst LOG_LEVEL: &str = if cfg!(debug_assertions) {\n    "DEBUG"\n} else {\n    "INFO"\n};\n\nconst BUFFER_SIZE: usize = if cfg!(debug_assertions) {\n    1024  // \u041c\u0435\u043d\u044c\u0448\u0438\u0439 \u0431\u0443\u0444\u0435\u0440 \u0432 debug \u0440\u0435\u0436\u0438\u043c\u0435 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n} else {\n    8192  // \u0411\u043e\u043b\u044c\u0448\u0438\u0439 \u0431\u0443\u0444\u0435\u0440 \u0432 release \u0440\u0435\u0436\u0438\u043c\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n};\n\nconst ENABLE_PROFILING: bool = cfg!(debug_assertions);\nconst ENABLE_METRICS: bool = true;\nconst ENABLE_TRACING: bool = cfg!(feature = "tracing");\n\n// \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\nconst MAX_PATH_LENGTH: usize = if cfg!(target_os = "windows") {\n    260\n} else if cfg!(target_os = "linux") {\n    4096\n} else {\n    1024\n};\n\nconst PATH_SEPARATOR: char = if cfg!(target_os = "windows") {\n    \'\\\\\'\n} else {\n    \'/\'\n};\n\n// \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043d\u043e-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\nconst WORD_SIZE: usize = std::mem::size_of::<usize>();\nconst IS_64_BIT: bool = WORD_SIZE == 8;\n\nfn main() {\n    println!("=== \u041a\u041e\u041d\u0424\u0418\u0413\u0423\u0420\u0410\u0426\u0418\u042f \u0421\u0411\u041e\u0420\u041a\u0418 ===");\n    println!("\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: {}", LOG_LEVEL);\n    println!("\u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u0443\u0444\u0435\u0440\u0430: {} \u0431\u0430\u0439\u0442", BUFFER_SIZE);\n    println!("\u041f\u0440\u043e\u0444\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e: {}", ENABLE_PROFILING);\n    println!("\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b: {}", ENABLE_METRICS);\n    println!("\u0422\u0440\u0435\u0439\u0441\u0438\u043d\u0433 \u0432\u043a\u043b\u044e\u0447\u0451\u043d: {}", ENABLE_TRACING);\n\n    println!("\\n=== \u041f\u041b\u0410\u0422\u0424\u041e\u0420\u041c\u0410 ===");\n    println!("\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430: {}", std::env::consts::OS);\n    println!("\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430: {}", std::env::consts::ARCH);\n    println!("\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u0443\u0442\u0438: {}", MAX_PATH_LENGTH);\n    println!("\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u043f\u0443\u0442\u0435\u0439: \'{}\'", PATH_SEPARATOR);\n\n    println!("\\n=== \u0410\u0420\u0425\u0418\u0422\u0415\u041a\u0422\u0423\u0420\u0410 ===");\n    println!("\u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u043b\u043e\u0432\u0430: {} \u0431\u0430\u0439\u0442", WORD_SIZE);\n    println!("64-\u0431\u0438\u0442\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430: {}", IS_64_BIT);\n    println!("\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0431\u0430\u0439\u0442\u043e\u0432: {}", std::env::consts::ENDIAN);\n\n    // \u0423\u0441\u043b\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u044f \u0432 \u043a\u043e\u0434\u0435\n    if ENABLE_PROFILING {\n        println!("\\n[\u041f\u0420\u041e\u0424\u0418\u041b\u0418\u0420\u041e\u0412\u0410\u041d\u0418\u0415] \u041d\u0430\u0447\u0430\u043b\u043e \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438");\n    }\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0443\u0442\u044f\u043c\u0438\n    let example_path = format!("home{}user{}documents{}file.txt",\n                              PATH_SEPARATOR, PATH_SEPARATOR, PATH_SEPARATOR);\n    println!("\\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0443\u0442\u0438: {}", example_path);\n\n    if example_path.len() > MAX_PATH_LENGTH {\n        println!("\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u043f\u0443\u0442\u044c \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443!");\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u043b\u0443\u0447\u0448\u0438\u0435-\u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438",children:"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"}),"\n",(0,i.jsx)(e.h3,{id:"1-\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435-\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435",children:"1. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u2705 \u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f"',children:'// \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b - SCREAMING_SNAKE_CASE\nconst MAX_BUFFER_SIZE: usize = 8192;\nconst DEFAULT_TIMEOUT_SECONDS: u64 = 30;\nconst PI: f64 = 3.14159265358979323846;\n\n// \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 - SCREAMING_SNAKE_CASE\nstatic GLOBAL_COUNTER: std::sync::atomic::AtomicUsize =\n    std::sync::atomic::AtomicUsize::new(0);\nstatic APPLICATION_CONFIG: &str = "production";\n\n// \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\nmod http_status {\n    pub const OK: u16 = 200;\n    pub const NOT_FOUND: u16 = 404;\n    pub const INTERNAL_SERVER_ERROR: u16 = 500;\n}\n\n// \u0418\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 enum \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n#[repr(u16)]\nenum HttpStatus {\n    Ok = 200,\n    NotFound = 404,\n    InternalServerError = 500,\n}\n\nfn main() {\n    println!("HTTP OK: {}", http_status::OK);\n    println!("HTTP OK (enum): {}", HttpStatus::Ok as u16);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"2-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442-\u0438-\u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445",children:"2. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u2705 \u0425\u043e\u0440\u043e\u0448\u0435\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"',children:'/// \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u0443\u0444\u0435\u0440\u0430 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n///\n/// \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043c\u0435\u0436\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438\n/// \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e. \u041f\u0440\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442\u0441\u044f\n/// \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u0440\u0430\u0441\u0442\u0451\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438.\nconst MAX_BUFFER_SIZE: usize = 8192;\n\n/// \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```rust\n/// use std::time::Duration;\n/// let timeout = Duration::from_secs(DEFAULT_HTTP_TIMEOUT);\n/// ```\nconst DEFAULT_HTTP_TIMEOUT: u64 = 30;\n\n/// \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0447\u0451\u0442\u0447\u0438\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n///\n/// \u042d\u0442\u043e\u0442 \u0441\u0447\u0451\u0442\u0447\u0438\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u043c \u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f\n/// \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n///\n/// # \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c\n///\n/// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c\n/// \u0432 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435 \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438.\nstatic REQUEST_COUNTER: std::sync::atomic::AtomicU64 =\n    std::sync::atomic::AtomicU64::new(0);\n\nfn main() {\n    println!("\u0420\u0430\u0437\u043c\u0435\u0440 \u0431\u0443\u0444\u0435\u0440\u0430: {}", MAX_BUFFER_SIZE);\n    println!("\u0422\u0430\u0439\u043c\u0430\u0443\u0442: {} \u0441\u0435\u043a", DEFAULT_HTTP_TIMEOUT);\n\n    REQUEST_COUNTER.fetch_add(1, std::sync::atomic::Ordering::Relaxed);\n    println!("\u0417\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e: {}",\n             REQUEST_COUNTER.load(std::sync::atomic::Ordering::Relaxed));\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"3-\u0438\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435-\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445-\u0447\u0438\u0441\u0435\u043b",children:"3. \u0418\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",metastring:'title="\u2705 \u0417\u0430\u043c\u0435\u043d\u0430 \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u043c\u0438"',children:'// \u274c \u041f\u043b\u043e\u0445\u043e: \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430\nfn bad_example() {\n    let buffer = vec![0u8; 4096];  // \u0427\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 4096?\n    std::thread::sleep(std::time::Duration::from_millis(5000)); // \u0427\u0442\u043e \u0437\u0430 5000?\n\n    if buffer.len() > 8192 {  // \u0418 \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 8192?\n        println!("\u0411\u0443\u0444\u0435\u0440 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439");\n    }\n}\n\n// \u2705 \u0425\u043e\u0440\u043e\u0448\u043e: \u043e\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\nconst DEFAULT_BUFFER_SIZE: usize = 4096;  // 4KB - \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\nconst NETWORK_TIMEOUT_MS: u64 = 5000;     // 5 \u0441\u0435\u043a\u0443\u043d\u0434 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430 \u0441\u0435\u0442\u0438\nconst MAX_SAFE_BUFFER_SIZE: usize = 8192; // 8KB - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\n\nfn good_example() {\n    let buffer = vec![0u8; DEFAULT_BUFFER_SIZE];\n    std::thread::sleep(std::time::Duration::from_millis(NETWORK_TIMEOUT_MS));\n\n    if buffer.len() > MAX_SAFE_BUFFER_SIZE {\n        println!("\u0411\u0443\u0444\u0435\u0440 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440");\n    }\n}\n\nfn main() {\n    bad_example();\n    good_example();\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",children:"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"}),"\n",(0,i.jsx)(e.p,{children:"\u0412 \u044d\u0442\u043e\u0439 \u0433\u043b\u0430\u0432\u0435 \u043c\u044b \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u0438\u0437\u0443\u0447\u0438\u043b\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 Rust:"}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b (const)"})," \u2014 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438, \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u043e\u0434\n\u2705 ",(0,i.jsx)(e.strong,{children:"\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (static)"})," \u2014 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0432\u0435\u0441\u044c \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\u2705 ",(0,i.jsx)(e.strong,{children:"\u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 const \u0438 static"})," \u2014 \u043a\u043e\u0433\u0434\u0430 \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\n\u2705 ",(0,i.jsx)(e.strong,{children:"\u041c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"})," \u2014 \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b\n\u2705 ",(0,i.jsx)(e.strong,{children:"\u041b\u0435\u043d\u0438\u0432\u0443\u044e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e"})," \u2014 OnceLock, lazy_static, Once\n\u2705 ",(0,i.jsx)(e.strong,{children:"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 (const fn)"})," \u2014 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438\n\u2705 ",(0,i.jsx)(e.strong,{children:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b"})," \u2014 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u043c\u0435\u0442\u0440\u0438\u043a\u0438, \u0443\u0441\u043b\u043e\u0432\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u044f\n\u2705 ",(0,i.jsx)(e.strong,{children:"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"})," \u2014 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0438\u0437\u0431\u0435\u0433\u0430\u043d\u0438\u0435 \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b"]}),"\n",(0,i.jsx)(e.p,{children:"\u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u0431\u043e\u043b\u0435\u0435 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u043c. \u041e\u043d\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u0430\u0436\u043d\u044b\u043c\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0430 Rust."}),"\n",(0,i.jsx)(e.admonition,{title:"\u0427\u0442\u043e \u0434\u0430\u043b\u044c\u0448\u0435?",type:"info",children:(0,i.jsxs)(e.p,{children:["\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0433\u043b\u0430\u0432\u0435: ",(0,i.jsx)(e.strong,{children:'"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043a\u043e\u0434\u0435"'})," \u2014 \u043c\u044b \u0438\u0437\u0443\u0447\u0438\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430 \u0432 Rust, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438."]})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u0437\u0430\u0434\u0430\u043d\u0438\u044f",children:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0438\u0433\u0440\u044b"})," \u0441 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u043c\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435, \u0443\u0440\u043e\u043d, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c) \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"})," \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0443\u0440\u043e\u0432\u043d\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442"})," \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c const fn \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"}),", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043b\u0435\u043d\u0438\u0432\u0443\u044e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"\u0432\u043e\u043f\u0440\u043e\u0441\u044b-\u0434\u043b\u044f-\u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",children:"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"\u0412 \u0447\u0451\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 const \u0438 static \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438?"}),"\n",(0,i.jsx)(e.li,{children:"\u041f\u043e\u0447\u0435\u043c\u0443 \u043c\u0443\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 unsafe?"}),"\n",(0,i.jsx)(e.li,{children:"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 const fn \u0438 \u043a\u0430\u043a\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0443 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c?"}),"\n",(0,i.jsx)(e.li,{children:"\u041a\u043e\u0433\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0435\u043d\u0438\u0432\u0443\u044e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445?"}),"\n",(0,i.jsx)(e.li,{children:"\u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445?"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435-\u0441\u0441\u044b\u043b\u043a\u0438",children:"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#constants",children:"The Rust Book - Constants"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://doc.rust-lang.org/reference/items/static-items.html",children:"Rust Reference - Static Items"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://doc.rust-lang.org/reference/items/constant-items.html",children:"Rust Reference - Constant Items"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://doc.rust-lang.org/reference/const_eval.html#const-functions",children:"Rust Reference - Const Functions"})}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(_,{...n})}):_(n)}},9365:(n,e,t)=>{t.d(e,{A:()=>l});t(6540);var s=t(4164);const i={tabItem:"tabItem_Ymn6"};var r=t(4848);function l({children:n,hidden:e,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,t),hidden:e,children:n})}}}]);