"use strict";(self.webpackChunkphoenix_lab=self.webpackChunkphoenix_lab||[]).push([[9837],{1439:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/comments","title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043a\u043e\u0434\u0435","description":"\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0432 Rust - \u043e\u0431\u044b\u0447\u043d\u044b\u0435, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0438 \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","source":"@site/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/04-comments.mdx","sourceDirName":"learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430","slug":"/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/comments","permalink":"/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/comments","draft":false,"unlisted":false,"editUrl":"https://github.com/RiPetitor/phoenixlaboratory/edit/main/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/04-comments.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043a\u043e\u0434\u0435","description":"\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0432 Rust - \u043e\u0431\u044b\u0447\u043d\u044b\u0435, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0438 \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","sidebar_position":4},"sidebar":"learnSidebar","previous":{"title":"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","permalink":"/docs/learn/Rust/\u041e\u0441\u043d\u043e\u0432\u044b \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430/constants"},"next":{"title":"\u042f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f C","permalink":"/docs/learn/\u0421/\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0421/intro"}}');var s=t(4848),a=t(8453),l=t(1470),i=t(9365);t(1028);const o={title:"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043a\u043e\u0434\u0435",description:"\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0432 Rust - \u043e\u0431\u044b\u0447\u043d\u044b\u0435, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0438 \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",sidebar_position:4},u="\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043a\u043e\u0434\u0435",c={},d=[{value:"\u0422\u0438\u043f\u044b \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0432 Rust",id:"\u0442\u0438\u043f\u044b-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432-\u0432-rust",level:2},{value:"\u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",id:"\u043e\u0431\u044b\u0447\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",level:3},{value:"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",id:"\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",level:2},{value:"\u0412\u043d\u0435\u0448\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",id:"\u0432\u043d\u0435\u0448\u043d\u0438\u0435-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",level:3},{value:"\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",id:"\u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",level:3},{value:"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c",id:"\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c",level:2},{value:"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",id:"\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435-\u0440\u0430\u0437\u0434\u0435\u043b\u044b-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",level:2},{value:"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b",id:"\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435-\u0440\u0430\u0437\u0434\u0435\u043b\u044b",level:3},{value:"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",level:2},{value:"\u0414\u043e\u043a\u0442\u0435\u0441\u0442\u044b",id:"\u0434\u043e\u043a\u0442\u0435\u0441\u0442\u044b",level:3},{value:"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",id:"\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",level:2},{value:"\u041a\u043e\u043c\u0430\u043d\u0434\u044b cargo doc",id:"\u043a\u043e\u043c\u0430\u043d\u0434\u044b-cargo-doc",level:3},{value:"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0432 Cargo.toml",id:"\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430-\u0432-cargotoml",level:3},{value:"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",id:"\u043b\u0443\u0447\u0448\u0438\u0435-\u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",level:2},{value:"1. \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",id:"1-\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",level:3},{value:"2. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",id:"2-\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438-\u043f\u0440\u043e\u0435\u043a\u0442\u0430",level:3},{value:"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0434\u043b\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",id:"\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438-\u0434\u043b\u044f-\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",level:2},{value:"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",id:"\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",level:3},{value:"\u0423\u0441\u043b\u043e\u0432\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",id:"\u0443\u0441\u043b\u043e\u0432\u043d\u0430\u044f-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",level:3},{value:"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",id:"\u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",level:2},{value:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f",id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u0437\u0430\u0434\u0430\u043d\u0438\u044f",level:3},{value:"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",id:"\u0432\u043e\u043f\u0440\u043e\u0441\u044b-\u0434\u043b\u044f-\u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",level:3},{value:"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438",id:"\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435-\u0441\u0441\u044b\u043b\u043a\u0438",level:3}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438-\u0432-\u043a\u043e\u0434\u0435",children:"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043a\u043e\u0434\u0435"})}),"\n",(0,s.jsxs)(e.p,{children:["\u0412 \u044d\u0442\u043e\u0439 \u0433\u043b\u0430\u0432\u0435 \u043c\u044b \u0438\u0437\u0443\u0447\u0438\u043c \u0432\u0441\u0435 \u0442\u0438\u043f\u044b ",(0,s.jsx)(e.strong,{children:"\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432"})," \u0432 Rust \u2014 \u043e\u0442 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0439 \u0434\u043e \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043a\u043e\u0434\u0430. Rust \u0438\u043c\u0435\u0435\u0442 \u043c\u043e\u0449\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430."]}),"\n",(0,s.jsx)(e.h2,{id:"\u0442\u0438\u043f\u044b-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432-\u0432-rust",children:"\u0422\u0438\u043f\u044b \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0432 Rust"}),"\n",(0,s.jsx)(e.h3,{id:"\u043e\u0431\u044b\u0447\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:"\u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"})," \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u043e\u043c \u0438 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432:"]}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"line",label:"\u041e\u0434\u043d\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u041e\u0434\u043d\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0441 //"',children:'fn main() {\n    // \u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043e\u0434\u043d\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\n    let x = 5;\n\n    let y = 10; // \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n\n    // \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n    // \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430\n    // \u0438\u043b\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\n    let result = x + y;\n\n    println!("\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {}", result); // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n    // TODO: \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\n    // FIXME: \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n    // NOTE: \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n    // WARNING: \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435\n}\n'})})}),(0,s.jsx)(i.A,{value:"block",label:"\u0411\u043b\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0411\u043b\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0441 /* */"',children:'fn main() {\n    /*\n     \u042d\u0442\u043e \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0431\u043b\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439.\n     \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\n     \u0438 \u0443\u0434\u043e\u0431\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0439.\n    */\n    let data = vec![1, 2, 3, 4, 5];\n\n    /* \u041a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u0431\u043b\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 */\n    let sum: i32 = data.iter().sum();\n\n    /*\n    \u0411\u043b\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438:\n    /*\n        \u042d\u0442\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\n        /* \u0418 \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u0438 */\n    */\n    \u0427\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430\n    */\n\n    println!("\u0421\u0443\u043c\u043c\u0430: {}", sum);\n\n    /*\n    \u041c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430:\n\n    1. \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0432\u0435\u043a\u0442\u043e\u0440 \u0447\u0438\u0441\u0435\u043b\n    2. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043e\u0431\u0445\u043e\u0434\u0430\n    3. \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0442\u043e\u0434 sum() \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b\n    4. \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n    */\n}\n'})})}),(0,s.jsx)(i.A,{value:"commenting-code",label:"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430"',children:'fn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n\n    // \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0439 \u043a\u043e\u0434\n    // let doubled: Vec<i32> = numbers.iter().map(|x| x * 2).collect();\n    // println!("\u0423\u0434\u0432\u043e\u0435\u043d\u043d\u044b\u0435: {:?}", doubled);\n\n    /*\n    \u0411\u043b\u043e\u043a \u043a\u043e\u0434\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0451\u043d:\n\n    let sum: i32 = numbers.iter().sum();\n    let average = sum as f64 / numbers.len() as f64;\n    println!("\u0421\u0440\u0435\u0434\u043d\u0435\u0435: {:.2}", average);\n    */\n\n    // \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u043e\u0434\n    println!("\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430: {:?}", numbers);\n\n    // \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439\n    let result = numbers\n        .iter()                    // \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\n        .filter(|&&x| x % 2 == 0)  // \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0451\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n        .map(|x| x * x)            // \u0412\u043e\u0437\u0432\u043e\u0434\u0438\u043c \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\n        .collect::<Vec<i32>>();    // \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\n\n    println!("\u041a\u0432\u0430\u0434\u0440\u0430\u0442\u044b \u0447\u0451\u0442\u043d\u044b\u0445: {:?}", result);\n}\n'})})})]}),"\n",(0,s.jsx)(e.h2,{id:"\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"})," \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u043e\u043c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 HTML-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438:"]}),"\n",(0,s.jsx)(e.h3,{id:"\u0432\u043d\u0435\u0448\u043d\u0438\u0435-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:"\u0412\u043d\u0435\u0448\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"triple-slash",label:"/// \u0434\u043b\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439"',children:'/// \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430.\n///\n/// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n///\n/// * `width` - \u0428\u0438\u0440\u0438\u043d\u0430 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n/// * `height` - \u0412\u044b\u0441\u043e\u0442\u0430 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let area = calculate_rectangle_area(5.0, 3.0);\n/// assert_eq!(area, 15.0);\n/// ```\n///\n/// # \u041f\u0430\u043d\u0438\u043a\u0438\n///\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043f\u0430\u043d\u0438\u043a\u0443\u0435\u0442 \u043f\u0440\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445.\nfn calculate_rectangle_area(width: f64, height: f64) -> f64 {\n    width * height\n}\n\n/// \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.\n///\n/// \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435,\n/// \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043c\u044f, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0438 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let user = User::new("\u0410\u043b\u0438\u0441\u0430", 30, "alice@example.com");\n/// println!("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c: {}", user.name);\n/// ```\npub struct User {\n    /// \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    pub name: String,\n    /// \u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    pub age: u32,\n    /// \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b\n    pub email: String,\n}\n\nimpl User {\n    /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n    ///\n    /// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n    ///\n    /// * `name` - \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    /// * `age` - \u0412\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    /// * `email` - \u0410\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let user = User::new("\u0411\u043e\u0431", 25, "bob@example.com");\n    /// ```\n    pub fn new(name: &str, age: u32, email: &str) -> Self {\n        Self {\n            name: name.to_string(),\n            age,\n            email: email.to_string(),\n        }\n    }\n\n    /// \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u043b\u0435\u0442\u043d\u0438\u043c.\n    ///\n    /// # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n    ///\n    /// `true` \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e 18 \u043b\u0435\u0442 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435, \u0438\u043d\u0430\u0447\u0435 `false`.\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let adult = User::new("\u0427\u0430\u0440\u043b\u0438", 20, "charlie@example.com");\n    /// let minor = User::new("\u0414\u044d\u0432\u0438\u0434", 16, "david@example.com");\n    ///\n    /// assert!(adult.is_adult());\n    /// assert!(!minor.is_adult());\n    /// ```\n    pub fn is_adult(&self) -> bool {\n        self.age >= 18\n    }\n}\n\n/// \u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0444\u0438\u0433\u0443\u0440\u0430\u043c\u0438.\n///\n/// \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\n/// \u043f\u043b\u043e\u0449\u0430\u0434\u0435\u0439 \u0438 \u043f\u0435\u0440\u0438\u043c\u0435\u0442\u0440\u043e\u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0444\u0438\u0433\u0443\u0440.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// use geometry::circle_area;\n/// let area = circle_area(5.0);\n/// ```\npub mod geometry {\n    /// \u0427\u0438\u0441\u043b\u043e \u03c0 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e\n    pub const PI: f64 = 3.14159265358979323846;\n\n    /// \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0443\u0433\u0430 \u043f\u043e \u0440\u0430\u0434\u0438\u0443\u0441\u0443.\n    ///\n    /// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n    ///\n    /// * `radius` - \u0420\u0430\u0434\u0438\u0443\u0441 \u043a\u0440\u0443\u0433\u0430\n    ///\n    /// # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n    ///\n    /// \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0443\u0433\u0430\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// use geometry::circle_area;\n    /// let area = circle_area(3.0);\n    /// assert!((area - 28.274333882308138).abs() < 1e-10);\n    /// ```\n    pub fn circle_area(radius: f64) -> f64 {\n        PI * radius * radius\n    }\n}\n\nfn main() {\n    let area = calculate_rectangle_area(5.0, 3.0);\n    println!("\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430: {}", area);\n\n    let user = User::new("\u0410\u043b\u0438\u0441\u0430", 25, "alice@example.com");\n    println!("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {} \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u043b\u0435\u0442\u043d\u0438\u0439: {}", user.name, user.is_adult());\n\n    let circle_area = geometry::circle_area(2.0);\n    println!("\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0440\u0443\u0433\u0430: {}", circle_area);\n}\n'})})}),(0,s.jsx)(i.A,{value:"outer-block",label:"/** */ \u0434\u043b\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0411\u043b\u043e\u0447\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"',children:'/**\n * \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u0447\u043a\u0438 \u0432 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435.\n *\n * \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b x \u0438 y, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u043e\u0447\u043a\u043e\u0439.\n *\n * # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n *\n * ```\n * let point = Point::new(3.0, 4.0);\n * let distance = point.distance_from_origin();\n * ```\n */\npub struct Point {\n    /// \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430 x\n    pub x: f64,\n    /// \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430 y\n    pub y: f64,\n}\n\nimpl Point {\n    /**\n     * \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438.\n     *\n     * # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n     *\n     * * `x` - \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430 \u043f\u043e \u043e\u0441\u0438 X\n     * * `y` - \u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430 \u043f\u043e \u043e\u0441\u0438 Y\n     *\n     * # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n     *\n     * ```\n     * let origin = Point::new(0.0, 0.0);\n     * let point = Point::new(3.0, 4.0);\n     * ```\n     */\n    pub fn new(x: f64, y: f64) -> Self {\n        Self { x, y }\n    }\n\n    /**\n     * \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 \u0434\u043e \u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442.\n     *\n     * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0442\u0435\u043e\u0440\u0435\u043c\u0443 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430: \u221a(x\xb2 + y\xb2)\n     *\n     * # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n     *\n     * \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 \u0434\u043e \u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\n     *\n     * # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n     *\n     * ```\n     * let point = Point::new(3.0, 4.0);\n     * let distance = point.distance_from_origin();\n     * assert_eq!(distance, 5.0);\n     * ```\n     */\n    pub fn distance_from_origin(&self) -> f64 {\n        (self.x * self.x + self.y * self.y).sqrt()\n    }\n\n    /**\n     * \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0442\u043e\u0447\u043a\u0430\u043c\u0438.\n     *\n     * # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n     *\n     * * `other` - \u0414\u0440\u0443\u0433\u0430\u044f \u0442\u043e\u0447\u043a\u0430\n     *\n     * # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n     *\n     * \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0442\u043e\u0447\u043a\u0430\u043c\u0438\n     *\n     * # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n     *\n     * ```\n     * let p1 = Point::new(0.0, 0.0);\n     * let p2 = Point::new(3.0, 4.0);\n     * let distance = p1.distance_to(&p2);\n     * assert_eq!(distance, 5.0);\n     * ```\n     */\n    pub fn distance_to(&self, other: &Point) -> f64 {\n        let dx = self.x - other.x;\n        let dy = self.y - other.y;\n        (dx * dx + dy * dy).sqrt()\n    }\n}\n\nfn main() {\n    let p1 = Point::new(0.0, 0.0);\n    let p2 = Point::new(3.0, 4.0);\n\n    println!("\u0422\u043e\u0447\u043a\u0430 1: ({}, {})", p1.x, p1.y);\n    println!("\u0422\u043e\u0447\u043a\u0430 2: ({}, {})", p2.x, p2.y);\n    println!("\u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 p2 \u0434\u043e \u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442: {}", p2.distance_from_origin());\n    println!("\u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0442\u043e\u0447\u043a\u0430\u043c\u0438: {}", p1.distance_to(&p2));\n}\n'})})})]}),"\n",(0,s.jsx)(e.h3,{id:"\u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:"\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"inner-line",label:"//! \u0434\u043b\u044f \u043c\u043e\u0434\u0443\u043b\u0435\u0439",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f \u0438\u0437\u043d\u0443\u0442\u0440\u0438"',children:'//! # \u041c\u043e\u0434\u0443\u043b\u044c \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0443\u0442\u0438\u043b\u0438\u0442\n//!\n//! \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n//! \u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n//!\n//! ## \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438\n//!\n//! - \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\n//! - \u0422\u0440\u0438\u0433\u043e\u043d\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n//! - \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n//!\n//! ## \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n//!\n//! ```\n//! use math_utils::{add, multiply, PI};\n//!\n//! let sum = add(2.0, 3.0);\n//! let product = multiply(4.0, 5.0);\n//! let circumference = 2.0 * PI * 5.0; // \u041e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u044c \u0441 \u0440\u0430\u0434\u0438\u0443\u0441\u043e\u043c 5\n//! ```\n//!\n//! ## \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\n//!\n//! \u041c\u043e\u0434\u0443\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u043c\u0438\n//! \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\nuse std::f64::consts;\n\n/// \u0427\u0438\u0441\u043b\u043e \u03c0 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e f64\npub const PI: f64 = consts::PI;\n\n/// \u0427\u0438\u0441\u043b\u043e e \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e f64\npub const E: f64 = consts::E;\n\n/// \u0421\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let result = add(2.0, 3.0);\n/// assert_eq!(result, 5.0);\n/// ```\npub fn add(a: f64, b: f64) -> f64 {\n    a + b\n}\n\n/// \u0423\u043c\u043d\u043e\u0436\u0430\u0435\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let result = multiply(4.0, 5.0);\n/// assert_eq!(result, 20.0);\n/// ```\npub fn multiply(a: f64, b: f64) -> f64 {\n    a * b\n}\n\n/// \u0412\u043e\u0437\u0432\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u044c.\n///\n/// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n///\n/// * `base` - \u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438\n/// * `exponent` - \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0441\u0442\u0435\u043f\u0435\u043d\u0438\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let result = power(2.0, 3.0);\n/// assert_eq!(result, 8.0);\n/// ```\npub fn power(base: f64, exponent: f64) -> f64 {\n    base.powf(exponent)\n}\n\nfn main() {\n    println!("\u0421\u043b\u043e\u0436\u0435\u043d\u0438\u0435: 2 + 3 = {}", add(2.0, 3.0));\n    println!("\u0423\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435: 4 * 5 = {}", multiply(4.0, 5.0));\n    println!("\u0421\u0442\u0435\u043f\u0435\u043d\u044c: 2^3 = {}", power(2.0, 3.0));\n    println!("\u03c0 = {}", PI);\n    println!("e = {}", E);\n}\n'})})}),(0,s.jsxs)(i.A,{value:"inner-block",label:"/*! */ \u0434\u043b\u044f \u043c\u043e\u0434\u0443\u043b\u0435\u0439",children:[(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0411\u043b\u043e\u0447\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"',children:'/*!\n# \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438\n\n\u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0442\u0440\u043e\u043a,\n\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0442\u0435\u043a\u0441\u0442\u0430.\n\n## \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438\n\n* **\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f** - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 email, \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432, URL\n* **\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435** - \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430, \u043e\u0431\u0440\u0435\u0437\u043a\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432\n* **\u0410\u043d\u0430\u043b\u0438\u0437** - \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0441\u043b\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439\n\n## \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442\n\n```rust\nuse string_utils::{validate_email, capitalize, word_count};\n\n// \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f email\nif validate_email("user@example.com") {\n    println!("Email \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439");\n}\n\n// \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430\nlet text = capitalize("hello world");\nassert_eq!(text, "Hello World");\n\n// \u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430\nlet count = word_count("Hello beautiful world");\nassert_eq!(count, 3);\n'})}),(0,s.jsx)(e.h2,{id:"\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c",children:"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"}),(0,s.jsx)(e.p,{children:"\u0412\u0441\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Unicode-\u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438\n\u0438 \u0438\u043c\u0435\u044e\u0442 \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(n) \u043f\u043e \u0434\u043b\u0438\u043d\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n*/"}),(0,s.jsx)(e.p,{children:"use regex::Regex;"}),(0,s.jsxs)(e.p,{children:["/// \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c email \u0430\u0434\u0440\u0435\u0441\u0430.\n///\n/// \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0443\u043f\u0440\u043e\u0449\u0451\u043d\u043d\u0443\u044e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0443 \u0434\u043b\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.\n/// \u0414\u043b\u044f production-\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0440\u043e\u0433\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430.\n///\n/// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n///\n/// * ",(0,s.jsx)(e.code,{children:"email"})," - \u0421\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n///\n/// # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n///\n/// ",(0,s.jsx)(e.code,{children:"true"})," \u0435\u0441\u043b\u0438 email \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 ",(0,s.jsx)(e.code,{children:"false"}),"\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ",(0,s.jsx)(e.code,{children:'/// assert!(validate_email("user@example.com")); /// assert!(validate_email("test.email+tag@domain.co.uk")); /// assert!(!validate_email("invalid.email")); /// assert!(!validate_email("@example.com")); ///'})]}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'pub fn validate_email(email: &str) -> bool {\n    let re = Regex::new(r"^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$").unwrap();\n    re.is_match(email)\n}\n'})}),(0,s.jsxs)(e.p,{children:["/// \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0431\u0443\u043a\u0432\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u0432 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u0443\u044e.\n///\n/// \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u0441\u043b\u043e\u0432: \u043f\u0440\u043e\u0431\u0435\u043b, \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u044f, \u043d\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n///\n/// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n///\n/// * ",(0,s.jsx)(e.code,{children:"text"})," - \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442\n///\n/// # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n///\n/// \u041d\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438 \u0441\u043b\u043e\u0432\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ",(0,s.jsx)(e.code,{children:'/// assert_eq!(capitalize("hello world"), "Hello World"); /// assert_eq!(capitalize("rust is AWESOME"), "Rust Is AWESOME"); ///'})]}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'pub fn capitalize(text: &str) -> String {\n    text.split_whitespace()\n        .map(|word| {\n            let mut chars = word.chars();\n            match chars.next() {\n                None => String::new(),\n                Some(first) => first.to_uppercase().collect::<String>() + chars.as_str(),\n            }\n        })\n        .collect::<Vec<_>>()\n        .join(" ")\n}\n'})}),(0,s.jsxs)(e.p,{children:["/// \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435.\n///\n/// \u0421\u043b\u043e\u0432\u043e\u043c \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435-\u043f\u0440\u043e\u0431\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n///\n/// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n///\n/// * ",(0,s.jsx)(e.code,{children:"text"})," - \u0422\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n///\n/// # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n///\n/// \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ",(0,s.jsx)(e.code,{children:'/// assert_eq!(word_count("Hello world"), 2); /// assert_eq!(word_count("  Hello   beautiful   world  "), 3); /// assert_eq!(word_count(""), 0); ///'})]}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'pub fn word_count(text: &str) -> usize {\n    text.split_whitespace().count()\n}\n\nfn main() {\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 email\n    let emails = ["user@example.com", "invalid.email", "test@domain.co"];\n    for email in emails {\n        println!("Email \'{}\' \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d: {}", email, validate_email(email));\n    }\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n    let texts = ["hello world", "rust is awesome", "MIXED cAsE text"];\n    for text in texts {\n        println!("\'{}\' -> \'{}\'", text, capitalize(text));\n    }\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u0441\u043b\u043e\u0432\n    let samples = ["Hello world", "  \u041c\u043d\u043e\u0433\u043e   \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432  \u043c\u0435\u0436\u0434\u0443   \u0441\u043b\u043e\u0432\u0430\u043c\u0438  ", ""];\n    for sample in samples {\n        println!("\'{}\' \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 {} \u0441\u043b\u043e\u0432", sample, word_count(sample));\n    }\n}\n'})})]})]}),"\n",(0,s.jsx)(e.h2,{id:"\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435-\u0440\u0430\u0437\u0434\u0435\u043b\u044b-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",children:"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"}),"\n",(0,s.jsx)(e.p,{children:"Rust \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438:"}),"\n",(0,s.jsx)(e.h3,{id:"\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435-\u0440\u0430\u0437\u0434\u0435\u043b\u044b",children:"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"',children:'/// \u041f\u0430\u0440\u0441\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u043e\u0448\u0438\u0431\u043e\u043a.\n///\n/// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n///\n/// * `input` - \u0421\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430\n/// * `radix` - \u041e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (2-36)\n///\n/// # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n///\n/// * `Ok(\u0447\u0438\u0441\u043b\u043e)` - \u043f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435\n/// * `Err(\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435_\u043e\u0448\u0438\u0431\u043a\u0438)` - \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430\n///\n/// # \u041e\u0448\u0438\u0431\u043a\u0438\n///\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n/// - \u041f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n/// - \u041d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f\n/// - \u041f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438\n/// - \u041d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\n///\n/// # \u041f\u0430\u043d\u0438\u043a\u0438\n///\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0430\u043d\u0438\u043a\u0443\u0435\u0442 \u0435\u0441\u043b\u0438 `radix` \u043c\u0435\u043d\u044c\u0448\u0435 2 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 36.\n///\n/// # \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c\n///\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043b\u044e\u0431\u044b\u043c\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.\n/// \u041d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u0430\u043c\u044f\u0442\u044c\u044e.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n///\n/// ```\n/// # use std::num::ParseIntError;\n/// # fn parse_number(input: &str, radix: u32) -> Result<i32, String> {\n/// #     i32::from_str_radix(input, radix).map_err(|e| e.to_string())\n/// # }\n/// let result = parse_number("42", 10);\n/// assert_eq!(result, Ok(42));\n///\n/// let hex_result = parse_number("FF", 16);\n/// assert_eq!(hex_result, Ok(255));\n///\n/// let binary_result = parse_number("1010", 2);\n/// assert_eq!(binary_result, Ok(10));\n/// ```\n///\n/// \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a:\n///\n/// ```\n/// # fn parse_number(input: &str, radix: u32) -> Result<i32, String> {\n/// #     i32::from_str_radix(input, radix).map_err(|e| e.to_string())\n/// # }\n/// let error_result = parse_number("xyz", 10);\n/// assert!(error_result.is_err());\n///\n/// let empty_result = parse_number("", 10);\n/// assert!(empty_result.is_err());\n/// ```\n///\n/// # \u0421\u043c. \u0442\u0430\u043a\u0436\u0435\n///\n/// * [`str::parse`] - \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b\n/// * [`i32::from_str_radix`] - \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430\n/// * [\u041c\u043e\u0434\u0443\u043b\u044c `num`](std::num) - \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438\nfn parse_number(input: &str, radix: u32) -> Result<i32, String> {\n    if radix < 2 || radix > 36 {\n        panic!("\u041d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f: {}", radix);\n    }\n\n    if input.is_empty() {\n        return Err("\u041f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430".to_string());\n    }\n\n    i32::from_str_radix(input, radix)\n        .map_err(|e| format!("\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430: {}", e))\n}\n\n/// \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f HTTP \u043a\u043b\u0438\u0435\u043d\u0442\u0430.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:\n///\n/// ```\n/// let config = HttpConfig::default();\n/// assert_eq!(config.timeout_seconds, 30);\n/// assert_eq!(config.max_retries, 3);\n/// ```\n///\n/// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438:\n///\n/// ```\n/// let config = HttpConfig {\n///     timeout_seconds: 60,\n///     max_retries: 5,\n///     user_agent: "MyApp/1.0".to_string(),\n/// };\n/// ```\n#[derive(Debug, Clone)]\npub struct HttpConfig {\n    /// \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\n    pub timeout_seconds: u64,\n    /// \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435\n    pub max_retries: u32,\n    /// \u0421\u0442\u0440\u043e\u043a\u0430 User-Agent \u0434\u043b\u044f HTTP \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432\n    pub user_agent: String,\n}\n\nimpl Default for HttpConfig {\n    /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n    ///\n    /// # \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n    ///\n    /// * `timeout_seconds`: 30\n    /// * `max_retries`: 3\n    /// * `user_agent`: "RustApp/1.0"\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let config = HttpConfig::default();\n    /// println!("\u0422\u0430\u0439\u043c\u0430\u0443\u0442: {} \u0441\u0435\u043a\u0443\u043d\u0434", config.timeout_seconds);\n    /// ```\n    fn default() -> Self {\n        Self {\n            timeout_seconds: 30,\n            max_retries: 3,\n            user_agent: "RustApp/1.0".to_string(),\n        }\n    }\n}\n\nfn main() {\n    // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0447\u0438\u0441\u0435\u043b\n    println!("=== \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0447\u0438\u0441\u0435\u043b ===");\n\n    let test_cases = [\n        ("42", 10),\n        ("FF", 16),\n        ("1010", 2),\n        ("777", 8),\n    ];\n\n    for (input, radix) in test_cases {\n        match parse_number(input, radix) {\n            Ok(num) => println!("\'{}\' (base {}) = {}", input, radix, num),\n            Err(e) => println!("\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \'{}\': {}", input, e),\n        }\n    }\n\n    // \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a\n    println!("\\n=== \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a ===");\n    let error_cases = [("xyz", 10), ("", 10), ("GG", 16)];\n\n    for (input, radix) in error_cases {\n        match parse_number(input, radix) {\n            Ok(num) => println!("\'{}\' = {}", input, num),\n            Err(e) => println!("\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0434\u043b\u044f \'{}\': {}", input, e),\n        }\n    }\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\n    println!("\\n=== HTTP \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f ===");\n    let default_config = HttpConfig::default();\n    println!("\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: {:?}", default_config);\n\n    let custom_config = HttpConfig {\n        timeout_seconds: 120,\n        max_retries: 10,\n        user_agent: "MyCustomApp/2.0".to_string(),\n    };\n    println!("\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f: {:?}", custom_config);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",children:"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"}),"\n",(0,s.jsx)(e.h3,{id:"\u0434\u043e\u043a\u0442\u0435\u0441\u0442\u044b",children:"\u0414\u043e\u043a\u0442\u0435\u0441\u0442\u044b"}),"\n",(0,s.jsx)(e.p,{children:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f:"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"basic-doctest",label:"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u044b",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"',children:'/// \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b \u0447\u0438\u0441\u043b\u0430.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// # // \u0421\u043a\u0440\u044b\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 #\n/// # fn factorial(n: u64) -> u64 {\n/// #     match n {\n/// #         0 | 1 => 1,\n/// #         _ => n * factorial(n - 1),\n/// #     }\n/// # }\n/// assert_eq!(factorial(0), 1);\n/// assert_eq!(factorial(1), 1);\n/// assert_eq!(factorial(5), 120);\n/// ```\n///\n/// \u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u0435\u043b:\n///\n/// ```\n/// # fn factorial(n: u64) -> u64 {\n/// #     match n {\n/// #         0 | 1 => 1,\n/// #         _ => n * factorial(n - 1),\n/// #     }\n/// # }\n/// let result = factorial(10);\n/// assert_eq!(result, 3_628_800);\n/// ```\nfn factorial(n: u64) -> u64 {\n    match n {\n        0 | 1 => 1,\n        _ => n * factorial(n - 1),\n    }\n}\n\n/// \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u043c.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// \u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438:\n///\n/// ```\n/// # fn is_palindrome(s: &str) -> bool {\n/// #     let cleaned: String = s.chars()\n/// #         .filter(|c| c.is_alphanumeric())\n/// #         .map(|c| c.to_lowercase().next().unwrap())\n/// #         .collect();\n/// #     cleaned == cleaned.chars().rev().collect::<String>()\n/// # }\n/// assert!(is_palindrome("racecar"));\n/// assert!(is_palindrome("A man a plan a canal Panama"));\n/// assert!(!is_palindrome("hello"));\n/// ```\n///\n/// \u041f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043e\u0434\u043d\u043e\u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430:\n///\n/// ```\n/// # fn is_palindrome(s: &str) -> bool {\n/// #     let cleaned: String = s.chars()\n/// #         .filter(|c| c.is_alphanumeric())\n/// #         .map(|c| c.to_lowercase().next().unwrap())\n/// #         .collect();\n/// #     cleaned == cleaned.chars().rev().collect::<String>()\n/// # }\n/// assert!(is_palindrome(""));\n/// assert!(is_palindrome("a"));\n/// assert!(is_palindrome("A"));\n/// ```\nfn is_palindrome(s: &str) -> bool {\n    let cleaned: String = s.chars()\n        .filter(|c| c.is_alphanumeric())\n        .map(|c| c.to_lowercase().next().unwrap())\n        .collect();\n    cleaned == cleaned.chars().rev().collect::<String>()\n}\n\n/// \u0414\u0435\u043b\u0438\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u043e\u043b\u044c.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435:\n///\n/// ```\n/// # fn safe_divide(a: f64, b: f64) -> Result<f64, &\'static str> {\n/// #     if b == 0.0 {\n/// #         Err("\u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043d\u043e\u043b\u044c")\n/// #     } else {\n/// #         Ok(a / b)\n/// #     }\n/// # }\n/// let result = safe_divide(10.0, 2.0);\n/// assert_eq!(result, Ok(5.0));\n/// ```\n///\n/// \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u043e\u043b\u044c:\n///\n/// ```\n/// # fn safe_divide(a: f64, b: f64) -> Result<f64, &\'static str> {\n/// #     if b == 0.0 {\n/// #         Err("\u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043d\u043e\u043b\u044c")\n/// #     } else {\n/// #         Ok(a / b)\n/// #     }\n/// # }\n/// let result = safe_divide(10.0, 0.0);\n/// assert_eq!(result, Err("\u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043d\u043e\u043b\u044c"));\n/// ```\nfn safe_divide(a: f64, b: f64) -> Result<f64, &\'static str> {\n    if b == 0.0 {\n        Err("\u0414\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043d\u043e\u043b\u044c")\n    } else {\n        Ok(a / b)\n    }\n}\n\nfn main() {\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b\u0430\n    println!("=== \u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b ===");\n    for i in 0..=6 {\n        println!("{}! = {}", i, factorial(i));\n    }\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u043e\u0432\n    println!("\\n=== \u041f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u044b ===");\n    let test_strings = ["racecar", "hello", "A man a plan a canal Panama", "race a car", ""];\n    for s in test_strings {\n        println!("\'{}\' \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c: {}", s, is_palindrome(s));\n    }\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0434\u0435\u043b\u0435\u043d\u0438\u044f\n    println!("\\n=== \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 ===");\n    let divisions = [(10.0, 2.0), (15.0, 3.0), (7.0, 0.0), (-8.0, 2.0)];\n    for (a, b) in divisions {\n        match safe_divide(a, b) {\n            Ok(result) => println!("{} / {} = {}", a, b, result),\n            Err(error) => println!("{} / {} -> \u041e\u0448\u0438\u0431\u043a\u0430: {}", a, b, error),\n        }\n    }\n}\n'})})}),(0,s.jsx)(i.A,{value:"advanced-doctest",label:"\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0435 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u044b",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u043e\u0432"',children:'/// \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u0438:\n///\n/// ```\n/// let mut queue = Queue::new();\n/// queue.push(1);\n/// queue.push(2);\n/// queue.push(3);\n///\n/// assert_eq!(queue.pop(), Some(1));\n/// assert_eq!(queue.pop(), Some(2));\n/// assert_eq!(queue.len(), 1);\n/// ```\n///\n/// \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0443\u0441\u0442\u043e\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e:\n///\n/// ```\n/// let mut queue: Queue<i32> = Queue::new();\n/// assert_eq!(queue.pop(), None);\n/// assert!(queue.is_empty());\n/// ```\n///\n/// \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u0430\u043d\u0438\u043a\u043e\u0439 (\u043f\u043e\u043c\u0435\u0447\u0435\u043d \u043a\u0430\u043a should_panic):\n///\n/// ```should_panic\n/// let mut queue = Queue::new();\n/// // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0430\u043d\u0438\u043a\u043e\u0432\u0430\u0442\u044c\n/// queue.panic_method();\n/// ```\n///\n/// \u041f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f (\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f):\n///\n/// ```ignore\n/// // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438\n/// let queue = Queue::new();\n/// queue.some_nonexistent_method();\n/// ```\n///\n/// \u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u0435\u0437 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438):\n///\n/// ```no_run\n/// // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u043d\u043e \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f\n/// use std::fs::File;\n/// let file = File::open("/etc/passwd").unwrap();\n/// ```\n///\n/// \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 Rust:\n///\n/// ```edition2021\n/// // \u041a\u043e\u0434 \u0434\u043b\u044f Rust edition 2021\n/// let queue = Queue::new();\n/// assert!(queue.is_empty());\n/// ```\n#[derive(Debug)]\npub struct Queue<T> {\n    items: Vec<T>,\n}\n\nimpl<T> Queue<T> {\n    /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u0443\u044e \u043f\u0443\u0441\u0442\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n    pub fn new() -> Self {\n        Self {\n            items: Vec::new(),\n        }\n    }\n\n    /// \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043d\u0435\u0446 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.\n    pub fn push(&mut self, item: T) {\n        self.items.push(item);\n    }\n\n    /// \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.\n    pub fn pop(&mut self) -> Option<T> {\n        if self.items.is_empty() {\n            None\n        } else {\n            Some(self.items.remove(0))\n        }\n    }\n\n    /// \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.\n    pub fn len(&self) -> usize {\n        self.items.len()\n    }\n\n    /// \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043f\u0443\u0441\u0442\u0430 \u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n    pub fn is_empty(&self) -> bool {\n        self.items.is_empty()\n    }\n\n    /// \u041c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0430\u043d\u0438\u043a\u0443\u0435\u0442 (\u0434\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 should_panic).\n    pub fn panic_method(&self) {\n        panic!("\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0430\u043d\u0438\u043a\u0443\u0435\u0442!");\n    }\n}\n\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u043c \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u043e\u043c.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// use std::collections::HashMap;\n///\n/// // \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n/// let mut data = HashMap::new();\n/// data.insert("\u043a\u043b\u044e\u04471", "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04351");\n/// data.insert("\u043a\u043b\u044e\u04472", "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04352");\n///\n/// // \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n/// let result = process_data(&data);\n/// assert_eq!(result.len(), 2);\n/// assert!(result.contains_key("\u043a\u043b\u044e\u04471"));\n/// ```\n///\n/// \u0422\u0435\u0441\u0442 \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438:\n///\n/// ```no_run\n/// use std::fs::{File, remove_file};\n/// use std::io::Write;\n///\n/// // \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b\n/// let mut file = File::create("temp_test.txt").unwrap();\n/// file.write_all(b"test data").unwrap();\n///\n/// // \u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0433\u043b\u0430 \u0431\u044b \u0431\u044b\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0430\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c\n///\n/// // \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b\n/// remove_file("temp_test.txt").unwrap();\n/// ```\nfn process_data(input: &std::collections::HashMap<&str, &str>) -> std::collections::HashMap<String, String> {\n    input.iter()\n        .map(|(k, v)| (k.to_string(), v.to_string()))\n        .collect()\n}\n\nfn main() {\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438\n    println!("=== \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 ===");\n    let mut queue = Queue::new();\n\n    println!("\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c");\n    queue.push("\u043f\u0435\u0440\u0432\u044b\u0439");\n    queue.push("\u0432\u0442\u043e\u0440\u043e\u0439");\n    queue.push("\u0442\u0440\u0435\u0442\u0438\u0439");\n\n    println!("\u0420\u0430\u0437\u043c\u0435\u0440 \u043e\u0447\u0435\u0440\u0435\u0434\u0438: {}", queue.len());\n\n    println!("\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438:");\n    while let Some(item) = queue.pop() {\n        println!("\u0418\u0437\u0432\u043b\u0435\u0447\u0451\u043d: {}", item);\n    }\n\n    println!("\u041e\u0447\u0435\u0440\u0435\u0434\u044c \u043f\u0443\u0441\u0442\u0430: {}", queue.is_empty());\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n    println!("\\n=== \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 ===");\n    use std::collections::HashMap;\n\n    let mut input_data = HashMap::new();\n    input_data.insert("\u0438\u043c\u044f", "\u0410\u043b\u0438\u0441\u0430");\n    input_data.insert("\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "30");\n    input_data.insert("\u0433\u043e\u0440\u043e\u0434", "\u041c\u043e\u0441\u043a\u0432\u0430");\n\n    let processed = process_data(&input_data);\n    println!("\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: {:?}", processed);\n}\n'})})}),(0,s.jsx)(i.A,{value:"doctest-features",label:"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u043e\u0432",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"',children:'/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u043e\u0432.\n///\n/// \u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 (\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 `cargo test`):\n///\n/// ```\n/// assert_eq!(add_two_numbers(2, 3), 5);\n/// ```\n///\n/// \u0422\u0435\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0430\u043d\u0438\u043a\u043e\u0432\u0430\u0442\u044c:\n///\n/// ```should_panic\n/// // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043f\u0430\u043d\u0438\u043a\u0443\n/// add_two_numbers(i32::MAX, 1); // \u041f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\n/// ```\n///\n/// \u0422\u0435\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f (\u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f):\n///\n/// ```ignore\n/// // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445\n/// assert_eq!(add_two_numbers(huge_number1, huge_number2), expected);\n/// ```\n///\n/// \u0422\u0435\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u043d\u043e \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f:\n///\n/// ```no_run\n/// // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0441\u043e\u0431\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\n/// let result = add_two_numbers(read_from_file(), read_from_network());\n/// println!("\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {}", result);\n/// ```\n///\n/// \u0422\u0435\u0441\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438:\n///\n/// ```compile_fail\n/// // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f\n/// let result: String = add_two_numbers(1, 2); // \u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0442\u0438\u043f\n/// ```\n///\n/// \u0421\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u0430:\n///\n/// ```\n/// # // \u042d\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0432\u0438\u0434\u043d\u044b \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n/// # fn setup_test_environment() {\n/// #     println!("\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430");\n/// # }\n/// # setup_test_environment();\n/// let result = add_two_numbers(5, 7);\n/// assert_eq!(result, 12);\n/// ```\n///\n/// \u0422\u0435\u0441\u0442 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438:\n///\n/// ```should_panic(expected = "overflow")\n/// // \u0414\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u0430\u043d\u0438\u043a\u0430 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c "overflow"\n/// add_two_numbers(i32::MAX, i32::MAX);\n/// ```\nfn add_two_numbers(a: i32, b: i32) -> i32 {\n    // \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u0434\u0435 \u0437\u0434\u0435\u0441\u044c \u0431\u044b\u043b\u0430 \u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\n    a.checked_add(b).expect("overflow occurred")\n}\n\n/// \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432.\npub struct Calculator {\n    result: f64,\n}\n\nimpl Calculator {\n    /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440.\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let calc = Calculator::new();\n    /// assert_eq!(calc.get_result(), 0.0);\n    /// ```\n    pub fn new() -> Self {\n        Self { result: 0.0 }\n    }\n\n    /// \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443.\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let mut calc = Calculator::new();\n    /// calc.add(5.0);\n    /// calc.add(3.0);\n    /// assert_eq!(calc.get_result(), 8.0);\n    /// ```\n    ///\n    /// \u0426\u0435\u043f\u043e\u0447\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:\n    ///\n    /// ```\n    /// let mut calc = Calculator::new();\n    /// let result = calc.add(10.0).multiply(2.0).get_result();\n    /// assert_eq!(result, 20.0);\n    /// ```\n    pub fn add(&mut self, value: f64) -> &mut Self {\n        self.result += value;\n        self\n    }\n\n    /// \u0423\u043c\u043d\u043e\u0436\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e.\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let mut calc = Calculator::new();\n    /// calc.add(5.0).multiply(3.0);\n    /// assert_eq!(calc.get_result(), 15.0);\n    /// ```\n    pub fn multiply(&mut self, value: f64) -> &mut Self {\n        self.result *= value;\n        self\n    }\n\n    /// \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let mut calc = Calculator::new();\n    /// assert_eq!(calc.get_result(), 0.0);\n    ///\n    /// calc.add(42.0);\n    /// assert_eq!(calc.get_result(), 42.0);\n    /// ```\n    pub fn get_result(&self) -> f64 {\n        self.result\n    }\n\n    /// \u0421\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043d\u043e\u043b\u044c.\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// let mut calc = Calculator::new();\n    /// calc.add(100.0);\n    /// assert_eq!(calc.get_result(), 100.0);\n    ///\n    /// calc.reset();\n    /// assert_eq!(calc.get_result(), 0.0);\n    /// ```\n    pub fn reset(&mut self) {\n        self.result = 0.0;\n    }\n}\n\nfn main() {\n    println!("=== \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f ===");\n    let sum1 = add_two_numbers(10, 20);\n    let sum2 = add_two_numbers(-5, 15);\n    println!("10 + 20 = {}", sum1);\n    println!("-5 + 15 = {}", sum2);\n\n    println!("\\n=== \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430 ===");\n    let mut calc = Calculator::new();\n    println!("\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: {}", calc.get_result());\n\n    calc.add(10.0).multiply(2.0).add(5.0);\n    println!("\u041f\u043e\u0441\u043b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 ((0 + 10) * 2) + 5 = {}", calc.get_result());\n\n    calc.reset();\n    println!("\u041f\u043e\u0441\u043b\u0435 \u0441\u0431\u0440\u043e\u0441\u0430: {}", calc.get_result());\n\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\n    let final_result = calc\n        .add(7.0)\n        .multiply(3.0)\n        .add(1.0)\n        .get_result();\n\n    println!("\u0426\u0435\u043f\u043e\u0447\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: {}", final_result);\n}\n'})})})]}),"\n",(0,s.jsx)(e.h2,{id:"\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",children:"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"}),"\n",(0,s.jsx)(e.h3,{id:"\u043a\u043e\u043c\u0430\u043d\u0434\u044b-cargo-doc",children:"\u041a\u043e\u043c\u0430\u043d\u0434\u044b cargo doc"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",metastring:'title="\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439"',children:"# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\ncargo doc\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435\ncargo doc --open\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438\ncargo doc --document-private-items\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439\ncargo doc --no-deps\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043a\u043e\u0434\u0430 (\u0437\u0430\u043f\u0443\u0441\u043a \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u043e\u0432)\ncargo test --doc\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0432 workspace\ncargo doc -p my_package\n\n# \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0444\u043b\u0430\u0433\u0430\u043c\u0438 rustdoc\ncargo doc -- --html-in-header custom.html\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430-\u0432-cargotoml",children:"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0432 Cargo.toml"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-toml",metastring:'title="\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 Cargo.toml"',children:'[package]\nname = "my_lib"\nversion = "0.1.0"\nedition = "2021"\ndocumentation = "https://docs.rs/my_lib"\n\n[package.metadata.docs.rs]\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f docs.rs\nall-features = true\nrustdoc-args = ["--cfg", "docsrs"]\n\n# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\nfeatures = ["doc-images"]\n\n[[example]]\nname = "basic_usage"\ndoc-scrape-examples = true\n\n[dependencies]\n# \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n[dependencies.image]\nversion = "0.24"\noptional = true\n\n[features]\ndefault = []\ndoc-images = ["image"]  # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u043b\u0443\u0447\u0448\u0438\u0435-\u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",children:"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"}),"\n",(0,s.jsx)(e.h3,{id:"1-\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:"1. \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"good-comments",label:"\u2705 \u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432"',children:'/// \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0431\u044b\u0441\u0442\u0440\u043e\u0439 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 (quicksort).\n///\n/// \u042d\u0442\u043e\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u043c\u0435\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(n log n)\n/// \u0438 \u0445\u0443\u0434\u0448\u0443\u044e O(n\xb2), \u043d\u043e \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e.\n///\n/// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n///\n/// * `arr` - \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0439 \u0441\u0440\u0435\u0437 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let mut numbers = vec![64, 34, 25, 12, 22, 11, 90];\n/// quicksort(&mut numbers);\n/// assert_eq!(numbers, vec![11, 12, 22, 25, 34, 64, 90]);\n/// ```\n///\n/// # \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n///\n/// - \u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439: O(n log n)\n/// - \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439: O(n log n)\n/// - \u0425\u0443\u0434\u0448\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439: O(n\xb2)\n/// - \u041f\u0430\u043c\u044f\u0442\u044c: O(log n) \u0434\u043b\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0437\u043e\u0432\u043e\u0432\nfn quicksort(arr: &mut [i32]) {\n    if arr.len() <= 1 {\n        return;\n    }\n\n    let pivot_index = partition(arr);\n\n    // \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0447\u0430\u0441\u0442\u0438 \u0434\u043e \u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    quicksort(&mut arr[0..pivot_index]);\n    quicksort(&mut arr[pivot_index + 1..]);\n}\n\n/// \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430.\n///\n/// \u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u043b\u0435\u0432\u043e,\n/// \u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u044b\u0435 - \u0432\u043f\u0440\u0430\u0432\u043e.\nfn partition(arr: &mut [i32]) -> usize {\n    let len = arr.len();\n    let pivot_index = len - 1;\n    let pivot_value = arr[pivot_index];\n\n    let mut store_index = 0;\n\n    // \u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u043f\u043e\u0440\u043d\u043e\u0433\u043e \u0432 \u043d\u0430\u0447\u0430\u043b\u043e\n    for i in 0..pivot_index {\n        if arr[i] < pivot_value {\n            arr.swap(i, store_index);\n            store_index += 1;\n        }\n    }\n\n    // \u041f\u043e\u043c\u0435\u0449\u0430\u0435\u043c \u043e\u043f\u043e\u0440\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e\n    arr.swap(store_index, pivot_index);\n    store_index\n}\n\n// \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u0432\u0430\u0436\u043d\u044b\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c \u043e \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438\nfn unsafe_memory_operation(ptr: *mut u8, size: usize) {\n    // SAFETY: \u0412\u044b\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e:\n    // 1. ptr \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 size \u0431\u0430\u0439\u0442\n    // 2. \u041f\u0430\u043c\u044f\u0442\u044c \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0442\u0438\u043f\u0430 u8\n    // 3. \u041d\u0438\u043a\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u044d\u0442\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438\n    unsafe {\n        std::ptr::write_bytes(ptr, 0, size);\n    }\n}\n\nfn main() {\n    let mut test_data = vec![64, 34, 25, 12, 22, 11, 90];\n    println!("\u0414\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438: {:?}", test_data);\n\n    quicksort(&mut test_data);\n    println!("\u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438: {:?}", test_data);\n}\n'})})}),(0,s.jsx)(i.A,{value:"bad-comments",label:"\u274c \u041f\u043b\u043e\u0445\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043b\u043e\u0445\u0438\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432"',children:'// \u274c \u041e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\nfn bad_example() {\n    let x = 5; // \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c x \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 5\n    let y = 10; // \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c y \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 10\n    let sum = x + y; // \u0421\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c x \u0438 y\n    println!("{}", sum); // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443\n}\n\n// \u274c \u0423\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\nfn calculate_tax(amount: f64) -> f64 {\n    // \u041d\u0430\u043b\u043e\u0433 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 10% (\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0443\u0441\u0442\u0430\u0440\u0435\u043b - \u0442\u0435\u043f\u0435\u0440\u044c 12%)\n    amount * 0.12\n}\n\n// \u274c \u0414\u0435\u0437\u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\n/// \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e (\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e!)\nfn misleading_sort(arr: &mut [i32]) {\n    arr.sort_by(|a, b| b.cmp(a)); // \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e\n}\n\n// \u274c \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438-\u0438\u0437\u0432\u0438\u043d\u0435\u043d\u0438\u044f \u0437\u0430 \u043f\u043b\u043e\u0445\u043e\u0439 \u043a\u043e\u0434\nfn messy_function() {\n    // \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0443\u0436\u0430\u0441\u0435\u043d, \u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\n    // TODO: \u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u0433\u0434\u0430-\u043d\u0438\u0431\u0443\u0434\u044c\n    // HACK: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n    let mut result = Vec::new();\n    // \u0418\u0437\u0432\u0438\u043d\u0438\u0442\u0435 \u0437\u0430 \u044d\u0442\u043e\u0442 \u0431\u0435\u0441\u043f\u043e\u0440\u044f\u0434\u043e\u043a...\n    for i in 0..100 {\n        if i % 2 == 0 {\n            result.push(i * 2);\n        }\n    }\n}\n\n// \u274c \u0418\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n/// \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430\n///\n/// # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n/// * a - \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n/// * b - \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n///\n/// # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n/// \u0421\u0443\u043c\u043c\u0443 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n/// ```\n/// let result = add(2, 3);  // result \u0431\u0443\u0434\u0435\u0442 5\n/// ```\nfn add(a: i32, b: i32) -> i32 {\n    a + b  // \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 a \u0438 b\n}\n\nfn main() {\n    bad_example();\n\n    let tax = calculate_tax(100.0);\n    println!("\u041d\u0430\u043b\u043e\u0433: {}", tax);\n\n    let mut numbers = vec![3, 1, 4, 1, 5];\n    misleading_sort(&mut numbers);\n    println!("\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e: {:?}", numbers);\n\n    messy_function();\n\n    let sum = add(2, 3);\n    println!("\u0421\u0443\u043c\u043c\u0430: {}", sum);\n}\n'})})}),(0,s.jsx)(i.A,{value:"comment-guidelines",label:"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b",children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"',children:'// \u2705 \u041e\u0431\u044a\u044f\u0441\u043d\u044f\u0439\u0442\u0435 \u041f\u041e\u0427\u0415\u041c\u0423, \u0430 \u043d\u0435 \u0427\u0422\u041e\nfn process_data(data: &[u8]) -> Vec<u8> {\n    // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0443\u0444\u0435\u0440 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0432 2 \u0440\u0430\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    // \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0435\u0440\u0435\u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0440\u0438 \u0440\u043e\u0441\u0442\u0435\n    let mut buffer = Vec::with_capacity(data.len() * 2);\n\n    for &byte in data {\n        // \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0431\u0430\u0439\u0442\u044b, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430\n        // \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0451\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435\n        if byte != 0 {\n            buffer.push(byte);\n        }\n    }\n\n    buffer\n}\n\n// \u2705 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b\n/// \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u041b\u0443\u043d\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0445 \u0441\u0443\u043c\u043c.\n///\n/// \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043a\u0430\u0440\u0442,\n/// IMEI \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432.\n///\n/// # \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\n///\n/// 1. \u041d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043f\u0440\u0430\u0432\u043e\u0439 \u0446\u0438\u0444\u0440\u044b, \u0443\u0434\u0432\u0430\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u0443\u044e \u0432\u0442\u043e\u0440\u0443\u044e \u0446\u0438\u0444\u0440\u0443\n/// 2. \u0415\u0441\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 9, \u0432\u044b\u0447\u0435\u0441\u0442\u044c 9\n/// 3. \u0421\u043b\u043e\u0436\u0438\u0442\u044c \u0432\u0441\u0435 \u0446\u0438\u0444\u0440\u044b\n/// 4. \u0415\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0430\u0442\u043d\u0430 10, \u043d\u043e\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0435\u043d\nfn luhn_check(number: &str) -> bool {\n    let digits: Vec<u32> = number\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .collect();\n\n    if digits.len() < 2 {\n        return false;\n    }\n\n    let sum: u32 = digits\n        .iter()\n        .rev()\n        .enumerate()\n        .map(|(i, &digit)| {\n            if i % 2 == 1 {\n                // \u0423\u0434\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0432\u0442\u043e\u0440\u0443\u044e \u0446\u0438\u0444\u0440\u0443 \u0441\u043f\u0440\u0430\u0432\u0430\n                let doubled = digit * 2;\n                if doubled > 9 { doubled - 9 } else { doubled }\n            } else {\n                digit\n            }\n        })\n        .sum();\n\n    sum % 10 == 0\n}\n\n// \u2705 \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0430\u0439\u0442\u0435 \u043e \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0445 \u043a\u0430\u043c\u043d\u044f\u0445\nfn parse_config_file(path: &str) -> Result<Config, String> {\n    // \u0412\u0410\u0416\u041d\u041e: \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0441\u0435\u0440 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u043a\u0446\u0438\u0438\n    // \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435 \u0441\u0442\u0440\u043e\u043a\u0438. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e\n    // \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u043b\u044e\u0447=\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445.\n\n    // TODO: \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 Unicode escaping \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439\n    // \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u044e 2.0\n\n    std::fs::read_to_string(path)\n        .map_err(|e| format!("\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0444\u0430\u0439\u043b: {}", e))\n        .and_then(|content| parse_config_content(&content))\n}\n\n#[derive(Debug)]\nstruct Config {\n    database_url: String,\n    port: u16,\n}\n\nfn parse_config_content(content: &str) -> Result<Config, String> {\n    // \u0417\u0430\u0433\u043b\u0443\u0448\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n    Ok(Config {\n        database_url: "localhost".to_string(),\n        port: 3000,\n    })\n}\n\n// \u2705 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0442\u0435\u0433\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\nfn optimize_query(query: &str) -> String {\n    // TODO: \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    // FIXME: \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u043f\u043e\u0434\u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\n    // HACK: \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f MySQL 5.7 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438\n    // NOTE: \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u0441 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 cache\n    // WARNING: \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0431\u043e\u043b\u0435\u0435 1MB\n\n    query.to_uppercase()\n}\n\nfn main() {\n    let data = b"hello\\x00world\\x00!";\n    let processed = process_data(data);\n    println!("\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: {:?}", std::str::from_utf8(&processed));\n\n    // \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u041b\u0443\u043d\u0430\n    let card_numbers = ["4532015112830366", "1234567890123456", ""];\n    for number in card_numbers {\n        println!("\u041d\u043e\u043c\u0435\u0440 \'{}\' \u0432\u0430\u043b\u0438\u0434\u0435\u043d: {}", number, luhn_check(number));\n    }\n\n    match parse_config_file("config.txt") {\n        Ok(config) => println!("\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f: {:?}", config),\n        Err(e) => println!("\u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: {}", e),\n    }\n\n    let optimized = optimize_query("select * from users");\n    println!("\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441: {}", optimized);\n}\n'})})})]}),"\n",(0,s.jsx)(e.h3,{id:"2-\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438-\u043f\u0440\u043e\u0435\u043a\u0442\u0430",children:"2. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435"',children:'//! # My Awesome Library\n//!\n//! \u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438,\n//! \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.\n//!\n//! ## \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442\n//!\n//! \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u0432\u0430\u0448 `Cargo.toml`:\n//!\n//! ```toml\n//! [dependencies]\n//! my-awesome-lib = "0.1"\n//! ```\n//!\n//! \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n//!\n//! ```\n//! use my_awesome_lib::{Parser, Validator};\n//!\n//! let parser = Parser::new();\n//! let data = parser.parse("some data").unwrap();\n//!\n//! let validator = Validator::new();\n//! assert!(validator.is_valid(&data));\n//! ```\n//!\n//! ## \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430\n//!\n//! \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439:\n//!\n//! * [`parser`] - \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n//! * [`validator`] - \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0441\u0445\u0435\u043c\u0430\u043c\n//! * [`transformer`] - \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438\n//! * [`error`] - \u0422\u0438\u043f\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430\n//!\n//! ## \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438\n//!\n//! - \u2705 \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 JSON, XML, CSV\n//! - \u2705 \u0413\u0438\u0431\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n//! - \u2705 \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438\n//! - \u2705 \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a\n//! - \u2705 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 async/await\n//!\n//! ## \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n//!\n//! \u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043f\u0430\u043f\u043a\u0443 `examples/` \u0434\u043b\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.\n\npub mod parser;\npub mod validator;\npub mod transformer;\npub mod error;\n\n// \u0420\u0435\u044d\u043a\u0441\u043f\u043e\u0440\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430\npub use parser::Parser;\npub use validator::Validator;\npub use transformer::Transformer;\npub use error::{LibError, LibResult};\n\n/// \u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445.\n///\n/// \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 JSON, XML, CSV \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b.\npub mod parser {\n    /// \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432.\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```\n    /// use my_awesome_lib::Parser;\n    ///\n    /// let parser = Parser::new();\n    /// let result = parser.parse_json(r#"{"name": "Alice", "age": 30}"#);\n    /// ```\n    pub struct Parser {\n        strict_mode: bool,\n    }\n\n    impl Parser {\n        /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n        pub fn new() -> Self {\n            Self { strict_mode: false }\n        }\n\n        /// \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u0433\u0438\u0439 \u0440\u0435\u0436\u0438\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430.\n        ///\n        /// \u0412 \u0441\u0442\u0440\u043e\u0433\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u043f\u0430\u0440\u0441\u0435\u0440 \u0431\u043e\u043b\u0435\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043d \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n        pub fn with_strict_mode(mut self) -> Self {\n            self.strict_mode = true;\n            self\n        }\n\n        /// \u041f\u0430\u0440\u0441\u0438\u0442 JSON \u0441\u0442\u0440\u043e\u043a\u0443.\n        ///\n        /// # \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n        ///\n        /// * `input` - JSON \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430\n        ///\n        /// # \u041e\u0448\u0438\u0431\u043a\u0438\n        ///\n        /// \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u0435\u0441\u043b\u0438 JSON \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d.\n        ///\n        /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n        ///\n        /// ```\n        /// # use my_awesome_lib::Parser;\n        /// let parser = Parser::new();\n        /// let result = parser.parse_json(r#"{"key": "value"}"#);\n        /// assert!(result.is_ok());\n        /// ```\n        pub fn parse_json(&self, input: &str) -> Result<ParsedData, crate::error::LibError> {\n            // \u0417\u0430\u0433\u043b\u0443\u0448\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n            Ok(ParsedData { content: input.to_string() })\n        }\n    }\n}\n\n/// \u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0441\u0445\u0435\u043c\u0430\u043c.\npub mod validator {\n    use crate::parser::ParsedData;\n\n    /// \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.\n    ///\n    /// \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 JSON Schema, XML Schema \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430.\n    pub struct Validator {\n        schema: Option<String>,\n    }\n\n    impl Validator {\n        /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u044b\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440.\n        pub fn new() -> Self {\n            Self { schema: None }\n        }\n\n        /// \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0445\u0435\u043c\u0443 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.\n        ///\n        /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n        ///\n        /// ```\n        /// # use my_awesome_lib::Validator;\n        /// let mut validator = Validator::new();\n        /// validator.set_schema(r#"{"type": "object"}"#);\n        /// ```\n        pub fn set_schema(&mut self, schema: &str) {\n            self.schema = Some(schema.to_string());\n        }\n\n        /// \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0432\u0430\u043b\u0438\u0434\u043d\u044b \u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u0435.\n        ///\n        /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n        ///\n        /// ```\n        /// # use my_awesome_lib::{Validator, parser::ParsedData};\n        /// let validator = Validator::new();\n        /// let data = ParsedData { content: "test".to_string() };\n        /// assert!(validator.is_valid(&data));\n        /// ```\n        pub fn is_valid(&self, data: &ParsedData) -> bool {\n            // \u0417\u0430\u0433\u043b\u0443\u0448\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n            !data.content.is_empty()\n        }\n    }\n}\n\n/// \u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u043c\u0438.\npub mod transformer {\n    use crate::parser::ParsedData;\n\n    /// \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.\n    ///\n    /// \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432 \u0434\u0440\u0443\u0433\u043e\u0439.\n    pub struct Transformer {\n        options: TransformOptions,\n    }\n\n    /// \u041e\u043f\u0446\u0438\u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.\n    #[derive(Default)]\n    pub struct TransformOptions {\n        /// \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043b\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043f\u0440\u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\n        pub preserve_comments: bool,\n        /// \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n        pub pretty_print: bool,\n    }\n\n    impl Transformer {\n        /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440 \u0441 \u043e\u043f\u0446\u0438\u044f\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n        pub fn new() -> Self {\n            Self {\n                options: TransformOptions::default(),\n            }\n        }\n\n        /// \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u043f\u0446\u0438\u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.\n        pub fn with_options(mut self, options: TransformOptions) -> Self {\n            self.options = options;\n            self\n        }\n\n        /// \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 JSON \u0432 XML.\n        ///\n        /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n        ///\n        /// ```\n        /// # use my_awesome_lib::{Transformer, parser::ParsedData};\n        /// let transformer = Transformer::new();\n        /// let json_data = ParsedData { content: r#"{"name": "Alice"}"#.to_string() };\n        /// let xml_result = transformer.json_to_xml(&json_data);\n        /// ```\n        pub fn json_to_xml(&self, data: &ParsedData) -> Result<String, crate::error::LibError> {\n            // \u0417\u0430\u0433\u043b\u0443\u0448\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n            Ok(format!("<root>{}</root>", data.content))\n        }\n    }\n}\n\n/// \u041c\u043e\u0434\u0443\u043b\u044c \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.\npub mod error {\n    use std::fmt;\n\n    /// \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0442\u0438\u043f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.\n    pub type LibResult<T> = Result<T, LibError>;\n\n    /// \u0422\u0438\u043f\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.\n    #[derive(Debug)]\n    pub enum LibError {\n        /// \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430\n        ParseError(String),\n        /// \u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n        ValidationError(String),\n        /// \u041e\u0448\u0438\u0431\u043a\u0430 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\n        TransformError(String),\n        /// \u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430\n        IoError(std::io::Error),\n    }\n\n    impl fmt::Display for LibError {\n        fn fmt(&self, f: &mut fmt::Formatter<\'_>) -> fmt::Result {\n            match self {\n                LibError::ParseError(msg) => write!(f, "Parse error: {}", msg),\n                LibError::ValidationError(msg) => write!(f, "Validation error: {}", msg),\n                LibError::TransformError(msg) => write!(f, "Transform error: {}", msg),\n                LibError::IoError(err) => write!(f, "IO error: {}", err),\n            }\n        }\n    }\n\n    impl std::error::Error for LibError {}\n\n    impl From<std::io::Error> for LibError {\n        fn from(err: std::io::Error) -> Self {\n            LibError::IoError(err)\n        }\n    }\n}\n\n// \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445\npub use parser::ParsedData;\n\n/// \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\npub struct ParsedData {\n    /// \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n    pub content: String,\n}\n\nfn main() {\n    // \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n    println!("=== \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f My Awesome Library ===");\n\n    // \u041f\u0430\u0440\u0441\u0438\u043d\u0433\n    let parser = Parser::new().with_strict_mode();\n    let json_data = r#"{"name": "Alice", "age": 30, "city": "Moscow"}"#;\n\n    match parser.parse_json(json_data) {\n        Ok(parsed) => {\n            println!("\u2705 JSON \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0435\u043d");\n\n            // \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\n            let validator = Validator::new();\n            if validator.is_valid(&parsed) {\n                println!("\u2705 \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e");\n\n                // \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\n                let transformer = Transformer::new();\n                match transformer.json_to_xml(&parsed) {\n                    Ok(xml) => println!("\u2705 \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0432 XML: {}", xml),\n                    Err(e) => println!("\u274c \u041e\u0448\u0438\u0431\u043a\u0430 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438: {}", e),\n                }\n            } else {\n                println!("\u274c \u0414\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e");\n            }\n        },\n        Err(e) => println!("\u274c \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430: {}", e),\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438-\u0434\u043b\u044f-\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432",children:"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0434\u043b\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432"}),"\n",(0,s.jsx)(e.h3,{id:"\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438",children:"\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"',children:'#![doc = "\u041a\u043e\u0440\u043d\u0435\u0432\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a\u0440\u0435\u0439\u0442\u0430"]\n#![doc(html_root_url = "https://docs.rs/my-crate/")]\n#![doc(html_logo_url = "https://example.com/logo.png")]\n#![doc(html_favicon_url = "https://example.com/favicon.ico")]\n\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let result = documented_function(42);\n/// assert_eq!(result, 84);\n/// ```\n#[doc = "\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"]\n#[doc(alias = "double")]  // \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u0438\u043c\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430\n#[doc(alias = "multiply_by_two")]\npub fn documented_function(x: i32) -> i32 {\n    x * 2\n}\n\n/// \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let item = DocumentedStruct::new("test");\n/// assert_eq!(item.name, "test");\n/// ```\n#[doc(alias = "Item")]\n#[doc(alias = "Record")]\npub struct DocumentedStruct {\n    /// \u0418\u043c\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    #[doc = "\u041f\u043e\u043b\u0435 name \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043c\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430"]\n    pub name: String,\n\n    /// \u0421\u043a\u0440\u044b\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 (\u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438)\n    #[doc(hidden)]\n    pub internal_id: u64,\n}\n\nimpl DocumentedStruct {\n    /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n    ///\n    /// \u0421\u043a\u0440\u044b\u0442\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438.\n    #[doc(hidden)]\n    pub fn internal_method(&self) -> &str {\n        "internal"\n    }\n\n    /// \u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440.\n    pub fn new(name: &str) -> Self {\n        Self {\n            name: name.to_string(),\n            internal_id: 12345,\n        }\n    }\n}\n\n/// \u041c\u043e\u0434\u0443\u043b\u044c \u0441 inline \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439.\n#[doc(inline)]\npub use std::collections::HashMap as MyHashMap;\n\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438.\n///\n/// ```\n/// # fn main() {\n/// let nums = vec![1, 2, 3, 4, 5];\n/// let doubled = example_with_inline_code(&nums);\n/// assert_eq!(doubled, vec![2, 4, 6, 8, 10]);\n/// # }\n/// ```\npub fn example_with_inline_code(input: &[i32]) -> Vec<i32> {\n    input.iter().map(|x| x * 2).collect()\n}\n\nfn main() {\n    println!("\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: {}", documented_function(21));\n\n    let item = DocumentedStruct::new("\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442");\n    println!("\u0421\u043e\u0437\u0434\u0430\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442: {}", item.name);\n    println!("\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434: {}", item.internal_method());\n\n    let numbers = vec![1, 2, 3, 4, 5];\n    let doubled = example_with_inline_code(&numbers);\n    println!("\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435: {:?}", numbers);\n    println!("\u0423\u0434\u0432\u043e\u0435\u043d\u043d\u044b\u0435: {:?}", doubled);\n\n    // \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e HashMap\n    let mut map = MyHashMap::new();\n    map.insert("key", "value");\n    println!("Map \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442: {:?}", map);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u0443\u0441\u043b\u043e\u0432\u043d\u0430\u044f-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",children:"\u0423\u0441\u043b\u043e\u0432\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",metastring:'title="\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438"',children:'/// \u041a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u0430\u044f \u0444\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0443\u0442\u0438\u043b\u0438\u0442\u0430.\n///\n/// \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b:\n///\n#[cfg_attr(target_os = "windows", doc = "\u041d\u0430 Windows \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 WinAPI \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438.")]\n#[cfg_attr(target_os = "linux", doc = "\u041d\u0430 Linux \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b POSIX.")]\n#[cfg_attr(target_os = "macos", doc = "\u041d\u0430 macOS \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Cocoa \u0438 Core Foundation.")]\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// ```\n/// let utils = FileUtils::new();\n/// let info = utils.get_file_info("test.txt");\n/// ```\npub struct FileUtils;\n\nimpl FileUtils {\n    /// \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043d\u043e\u0432\u044b\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u0443\u0442\u0438\u043b\u0438\u0442.\n    pub fn new() -> Self {\n        Self\n    }\n\n    /// \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0444\u0430\u0439\u043b\u0435.\n    ///\n    /// # \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438\n    ///\n    #[cfg_attr(target_os = "windows", doc = "\u041d\u0430 Windows \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0444\u0430\u0439\u043b\u0430 \u0438\u0437 NTFS.")]\n    #[cfg_attr(not(target_os = "windows"), doc = "\u041d\u0430 Unix-\u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 inode.")]\n    ///\n    /// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n    ///\n    /// ```no_run\n    /// # use std::path::Path;\n    /// let utils = FileUtils::new();\n    /// if let Some(info) = utils.get_file_info("example.txt") {\n    ///     println!("\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430: {} \u0431\u0430\u0439\u0442", info.size);\n    /// }\n    /// ```\n    pub fn get_file_info(&self, path: &str) -> Option<FileInfo> {\n        // \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n        #[cfg(target_os = "windows")]\n        {\n            // Windows-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434\n            Some(FileInfo {\n                size: 0,\n                is_readonly: false,\n                platform_specific: "NTFS".to_string(),\n            })\n        }\n\n        #[cfg(not(target_os = "windows"))]\n        {\n            // Unix-\u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n            Some(FileInfo {\n                size: 0,\n                is_readonly: false,\n                platform_specific: "POSIX".to_string(),\n            })\n        }\n    }\n}\n\n/// \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0444\u0430\u0439\u043b\u0435.\n///\n/// \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u0430, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445.\n#[derive(Debug)]\npub struct FileInfo {\n    /// \u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445\n    pub size: u64,\n    /// \u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u0444\u0430\u0439\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\n    pub is_readonly: bool,\n    /// \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e-\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\n    #[cfg_attr(target_os = "windows", doc = "\u041d\u0430 Windows \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0438\u043f \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b")]\n    #[cfg_attr(not(target_os = "windows"), doc = "\u041d\u0430 Unix \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0438\u043f inode")]\n    pub platform_specific: String,\n}\n\n/// \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.\n///\n#[cfg_attr(feature = "advanced", doc = "\u0412 \u0440\u0435\u0436\u0438\u043c\u0435 \'advanced\' \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438.")]\n#[cfg_attr(not(feature = "advanced"), doc = "\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435 feature \'advanced\'.")]\n///\n/// # \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n///\n/// \u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n/// ```\n/// let result = feature_dependent_function("test data");\n/// ```\n///\n#[cfg_attr(feature = "advanced", doc = r#"\n\u0421 \u0432\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \'advanced\':\n'})}),"\n",(0,s.jsx)(e.h1,{id:"cfgfeature--advanced",children:'#[cfg(feature = "advanced")]'}),"\n",(0,s.jsx)(e.p,{children:'let optimized = feature_dependent_function("large dataset");\n// \u0411\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c'}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'"#)]\npub fn feature_dependent_function(input: &str) -> String {\n    #[cfg(feature = "advanced")]\n    {\n        // \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f feature "advanced"\n        format!("OPTIMIZED: {}", input.to_uppercase())\n    }\n\n    #[cfg(not(feature = "advanced"))]\n    {\n        // \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f\n        format!("BASIC: {}", input)\n    }\n}\n\nfn main() {\n    println!("=== \u041a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b ===");\n\n    let utils = FileUtils::new();\n    if let Some(info) = utils.get_file_info("Cargo.toml") {\n        println!("\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0444\u0430\u0439\u043b\u0435: {:?}", info);\n    }\n\n    println!("\\n=== \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u0442 feature ===");\n    let result = feature_dependent_function("hello world");\n    println!("\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {}", result);\n\n    // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430\n    println!("\\n=== \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 ===");\n    println!("\u041e\u0421: {}", std::env::consts::OS);\n    println!("\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430: {}", std::env::consts::ARCH);\n\n    // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 feature\n    #[cfg(feature = "advanced")]\n    println!("Feature \'advanced\' \u0432\u043a\u043b\u044e\u0447\u0451\u043d");\n\n    #[cfg(not(feature = "advanced"))]\n    println!("Feature \'advanced\' \u043e\u0442\u043a\u043b\u044e\u0447\u0451\u043d");\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",children:"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"}),"\n",(0,s.jsx)(e.p,{children:"\u0412 \u044d\u0442\u043e\u0439 \u0433\u043b\u0430\u0432\u0435 \u043c\u044b \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u0438\u0437\u0443\u0447\u0438\u043b\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0432 Rust:"}),"\n",(0,s.jsxs)(e.p,{children:["\u2705 ",(0,s.jsx)(e.strong,{children:"\u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"})," \u2014 ",(0,s.jsx)(e.code,{children:"//"})," \u0438 ",(0,s.jsx)(e.code,{children:"/* */"})," \u0434\u043b\u044f \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\n\u2705 ",(0,s.jsx)(e.strong,{children:"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"})," \u2014 ",(0,s.jsx)(e.code,{children:"///"})," \u0438 ",(0,s.jsx)(e.code,{children:"/** */"})," \u0434\u043b\u044f \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n\u2705 ",(0,s.jsx)(e.strong,{children:"\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"})," \u2014 ",(0,s.jsx)(e.code,{children:"//!"})," \u0438 ",(0,s.jsx)(e.code,{children:"/*! */"})," \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u0435\u0439\n\u2705 ",(0,s.jsx)(e.strong,{children:"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b"})," \u2014 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u043a\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n\u2705 ",(0,s.jsx)(e.strong,{children:"\u0414\u043e\u043a\u0442\u0435\u0441\u0442\u044b"})," \u2014 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n\u2705 ",(0,s.jsx)(e.strong,{children:"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"})," \u2014 \u043a\u043e\u043c\u0430\u043d\u0434\u044b cargo doc \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n\u2705 ",(0,s.jsx)(e.strong,{children:"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"})," \u2014 \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\n\u2705 ",(0,s.jsx)(e.strong,{children:"\u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b"})," \u2014 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"]}),"\n",(0,s.jsx)(e.p,{children:"\u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u2014 \u044d\u0442\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u044f \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. Rust \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430."}),"\n",(0,s.jsx)(e.admonition,{title:"\u0427\u0442\u043e \u0434\u0430\u043b\u044c\u0448\u0435?",type:"info",children:(0,s.jsxs)(e.p,{children:["\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0433\u043b\u0430\u0432\u0435: ",(0,s.jsx)(e.strong,{children:'"\u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b (if/else)"'})," \u2014 \u043c\u044b \u0438\u0437\u0443\u0447\u0438\u043c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439."]})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435-\u0437\u0430\u0434\u0430\u043d\u0438\u044f",children:"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443"})," \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0444\u0438\u0433\u0443\u0440\u0430\u043c\u0438 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u044b"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c"})," \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432: \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0438 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"})," (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0442\u0435\u043a \u0438\u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c) \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442"})," \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Cargo.toml"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\u0432\u043e\u043f\u0440\u043e\u0441\u044b-\u0434\u043b\u044f-\u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",children:"\u0412\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\u0412 \u0447\u0451\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 ",(0,s.jsx)(e.code,{children:"///"})," \u0438 ",(0,s.jsx)(e.code,{children:"//!"})," \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438?"]}),"\n",(0,s.jsx)(e.li,{children:"\u041a\u0430\u043a\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Rust?"}),"\n",(0,s.jsx)(e.li,{children:"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0434\u043e\u043a\u0442\u0435\u0441\u0442\u044b \u0438 \u043a\u0430\u043a\u0438\u0435 \u0443 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b?"}),"\n",(0,s.jsxs)(e.li,{children:["\u041a\u043e\u0433\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ",(0,s.jsx)(e.code,{children:"#[doc(hidden)]"}),"?"]}),"\n",(0,s.jsx)(e.li,{children:"\u041a\u0430\u043a \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435?"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435-\u0441\u0441\u044b\u043b\u043a\u0438",children:"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://doc.rust-lang.org/book/ch03-04-comments.html",children:"The Rust Book - Comments"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://doc.rust-lang.org/rustdoc/",children:"rustdoc Book"})," \u2014 \u043f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://rust-lang.github.io/rfcs/1574-more-api-documentation-conventions.html",children:"RFC 1574"})," \u2014 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044f \u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 API"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://docs.rs/",children:"docs.rs"})," \u2014 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u0440\u0435\u0439\u0442\u043e\u0432"]}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},1470:(n,e,t)=>{t.d(e,{A:()=>w});var r=t(6540),s=t(4164),a=t(3104),l=t(6347),i=t(205),o=t(7485),u=t(1682),c=t(679);function d(n){return r.Children.toArray(n).filter((n=>"\n"!==n)).map((n=>{if(!n||(0,r.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(n){const{values:e,children:t}=n;return(0,r.useMemo)((()=>{const n=e??function(n){return d(n).map((({props:{value:n,label:e,attributes:t,default:r}})=>({value:n,label:e,attributes:t,default:r})))}(t);return function(n){const e=(0,u.XI)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function m({value:n,tabValues:e}){return e.some((e=>e.value===n))}function f({queryString:n=!1,groupId:e}){const t=(0,l.W6)(),s=function({queryString:n=!1,groupId:e}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,o.aZ)(s),(0,r.useCallback)((n=>{if(!s)return;const e=new URLSearchParams(t.location.search);e.set(s,n),t.replace({...t.location,search:e.toString()})}),[s,t])]}function _(n){const{defaultValue:e,queryString:t=!1,groupId:s}=n,a=p(n),[l,o]=(0,r.useState)((()=>function({defaultValue:n,tabValues:e}){if(0===e.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:e}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=e.find((n=>n.default))??e[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:e,tabValues:a}))),[u,d]=f({queryString:t,groupId:s}),[_,h]=function({groupId:n}){const e=function(n){return n?`docusaurus.tab.${n}`:null}(n),[t,s]=(0,c.Dv)(e);return[t,(0,r.useCallback)((n=>{e&&s.set(n)}),[e,s])]}({groupId:s}),g=(()=>{const n=u??_;return m({value:n,tabValues:a})?n:null})();(0,i.A)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((n=>{if(!m({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);o(n),d(n),h(n)}),[d,h,a]),tabValues:a}}var h=t(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function b({className:n,block:e,selectedValue:t,selectValue:r,tabValues:l}){const i=[],{blockElementScrollPositionUntilNextRender:o}=(0,a.a_)(),u=n=>{const e=n.currentTarget,s=i.indexOf(e),a=l[s].value;a!==t&&(o(e),r(a))},c=n=>{let e=null;switch(n.key){case"Enter":u(n);break;case"ArrowRight":{const t=i.indexOf(n.currentTarget)+1;e=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(n.currentTarget)-1;e=i[t]??i[i.length-1];break}}e?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":e},n),children:l.map((({value:n,label:e,attributes:r})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:n=>{i.push(n)},onKeyDown:c,onClick:u,...r,className:(0,s.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":t===n}),children:e??n},n)))})}function v({lazy:n,children:e,selectedValue:t}){const a=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){const n=a.find((n=>n.props.value===t));return n?(0,r.cloneElement)(n,{className:(0,s.A)("margin-top--md",n.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((n,e)=>(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==t})))})}function j(n){const e=_(n);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,x.jsx)(b,{...e,...n}),(0,x.jsx)(v,{...e,...n})]})}function w(n){const e=(0,h.A)();return(0,x.jsx)(j,{...n,children:d(n.children)},String(e))}},9365:(n,e,t)=>{t.d(e,{A:()=>l});t(6540);var r=t(4164);const s={tabItem:"tabItem_Ymn6"};var a=t(4848);function l({children:n,hidden:e,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,t),hidden:e,children:n})}}}]);